1、abstract关键字
		可以修饰类和方法；
		abstract修饰类（抽象类）：
				被abstract修饰的类，不能再创建对象了 ；
				抽象类中一定有构造器，便于子类实例化调用（子类在创建对现实会调用父类构造器）
				开发中，都会调用抽象类的子类，完成相应的操作。
		abstract修饰方法（抽象方法）：
				只有方法的声明，没有方法体（没有{}）；
				包含抽象方法的类一定是抽象类，反之不然；
				若子类重写了父类中所有的抽象方法后，方可实例化，若子类没有重写所有的抽象方法，则子类也应该声明为一个抽象类。
		abstract使用注意：
				abstract不能修饰私有方法、静态方法、final的方法和类。
		匿名子类和匿名对象：
				void showMoney(new Bank(){//匿名对象的定义
       				 Bank类的子类的类体

				});//注意这里最后的右小括号

2、接口：
		接口使用interface定义；
		Java中，接口和类是并列的两个结构；
		 接口定义：
				JDK7及以前（只能定义全局常量和抽象方法）
						全局常量：public static final定义的（接口中的变量都是被final修饰）
						抽象方法：public static abstract定义的
				JDK8（除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法等）
		接口中不允许定义构造器，意味着接口不可以实例化；
		Java开放中，接口都通过让类去实现的方式来使用（class class_name implements interface_name）：
				如果实现类实现了接口中的所有抽象方法，则此实现类就可以实例化；
				如果实现类没有实现接口中的所有的抽象方法，则此实现类仍为一个抽象类。
		Java类可以实现多个接口（中间用，隔开）--->弥补了Java单继承性的局限性：
				格式：class AA extends BB implements CC,DD,EE
		接口和接口之间是多继承；
		接口的具体实现体现了多态性，接口实际上可以看作是一种规范。，接口同样也可以作为引用类型出现在形参列表中。	
