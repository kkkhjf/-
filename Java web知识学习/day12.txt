1、Http协议
	客户端给服务器发送数据叫请求（GET），服务器端回传数据叫响应（POST）；
	GET请求
		请求行
			请求的方式			GET
			请求的资源路径
			请求的协议版本号	HTTP/1.1
		请求头
			key:value	不同的键值对，表示不同的含义
			Accept：			告诉服务器，客户端可以接受的数据类型
			Accept-Language：	告诉服务器可以接受的语言类型
			User-Agent：		浏览器的信息
			Accept-Encoding：	告诉服务器，客户端可以就收的数据编码（压缩）格式
			Host：				请求的服务器ip和端口号
			Connection：		告诉服务器当前连接如何处理
								Keep-Alive	告诉服务器回传数据不要马上关闭，保持一小段时间的连接
								Closed		马上关闭
	POST请求
		请求行
			请求的方式			POST
			请求的资源路径
			请求的协议版本号	HTTP/1.1
		请求头
			key:value		不同的请求头，有不同的含义；
			大部分key:vakue同GET请求类似
			Referer：		表示请求发起时，浏览器地址栏中的地址（从哪来的）；
			Connetc-Type：	表示发送的数据类型；
							application/x-www-form-urlencoded	v表示提交的数据格式是：name=value&name=value，然后对其进行url编码
																url编码是把非英文内容转换成：%xx%xx
							multipart/form-data					表示以多段的形式提交数据给服务器）—以流的形式提交，用于上传）
			Content-Lnegth：表示发送的数据的长度；
			Cache-Control：	表示如何控制缓存  no-cache不缓存；
		请求头和请求体之间有空行
		请求体--->发送给服务器的数据
	常用的请求头
		Accept：			表示客户端可以接受的类型；
		Accept-Language：	表示客户端可以接受的语言类型；
		User-Agent：		表示客户端浏览器的信号；
		Host：				表示请求时的服务器IP和端口号；
	选择GET请求和POST
		选择GET请求
			form标签（method=get）
			a标签
			link标签
			script引入js文件
			img标签引入图片
			iframe引入html页面
			在浏览器地址栏中输入地址后敲回车 
		选择POST请求
			form标签（method=psot）
	响应的HTTP协议格式
		响应行
			响应协议和版本号
			响应状态码
			响应状态描述符
		响应头
			key:value		不同的响应头，有其不同的含义
		响应头和响应体之间有空行
		响应体--->回传给客户端的数据
	常见的响应码
		200		表示请求成功
		302		表示请求重定向
		404		表示请求服务器已经收到啊，但是你要求的数据不存在（请求地址错误）
		500		表示服务器收到请求但是服务器内部错误（代码错误） 
		
2、HttpServletRequest类
	每次只要有请求进入Tomcat服务器，Tomcat服务器就会把请求过来的HTTP协议信息解析好封装到Request对象中，
		然后传递到service方法（doGet和doPost）中给我们使用。我们可以通过HttpServletRequest对象，获取到所有请求的信息；
	HttpServletRequest类的常用方法
		getRequestURI()				获取请求的资源路径
		getRequestURL()				获取请求的统一资源定位符
		getRemoteHost()				获取客户端的IP地址
		getHeader()					获取请求头
		getParameter()				获取请求的参数
		getParameterValues()		获取请求的参数（多个值得时候使用）
		getMethod()					获取请求得方式GET或POST
		setAttribute(key,value)		设置域数据
		getAttribute(key)			获取域数据
		getRequestDispatcher()		获取请求转发对象
		代码实例
			String requestURI = request.getRequestURI();
			StringBuffer requestURL = request.getRequestURL();
			String remoteHost = request.getRemoteHost();


			System.out.println("请求的URI ---> "+requestURI);
			System.out.println("请求的URL ---> "+requestURL);
			System.out.println("请求的客户端IP ---> "+remoteHost);

			String username = request.getParameter("username");
			String pwd = request.getParameter("pwd");
			String hobby = request.getParameter("hobby");
			String[] hobby1 = request.getParameterValues("hobby");

			System.out.println("用户名 ---> "+username);
			System.out.println("密码 ---> "+pwd);
			System.out.println("兴趣爱好 ---> "+hobby);//获取单个值
			System.out.println("兴趣爱好 ---> "+Arraylist.asList(hobby1));//获取多个值

3、请求的转发
	服务器收到请求后，从一次资源跳转到另一个服务器资源得操作叫请求转发；
	Servlet1请求转发Servlet2代码实例：
		Servlet1中代码实现
			String username = request.getParameter("username");
			System.out.println("在Servlet1中查看参数：" + username);
			//给请求添加标签，并转发到Servlet2程序继续执行，通过域数据实现
			//给被转发得请求贴上标签
			request.setAttribute("key","servlet1");
			//请求转发必须要以斜杠打头，/ 表示地址为http://ip:port/工程名称/。映射到IDEA代码得web目录
			RequestDispatcher requestDispatcher = request.getRequestDispatcher("/HelloServlet");
			//跳转到目标Servlet程序
			requestDispatcher.forward(request,response);
		Servlet2代码实现
			String username = req.getParameter("username");
			System.out.println("在Servlet2中查看参数：" + username);
			//查看Servlet1是否给请求成功贴上标签
			Object key = req.getAttribute("key");
			System.out.println("请求是否有章：" + key);
			//Servlet2开始处理请求
			System.out.println("Servlet2开始处理请求！");
		请求转发得特点
			浏览器地址栏没有变化；
			他们是一次请求；
			他们共享Request域中的数据；
			可以转发到WEB-INF目录下，直接访问不可行;
			
4、Servlet-base标签
	base标签可以设置当前页面中所有相对路径工作时，参照哪个路径来进行跳转；
	没有base标签时，页面跳转时参照的是当前浏览器地址栏的地址；