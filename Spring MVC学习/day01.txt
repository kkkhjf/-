1、Spring MVC
	MVC是一种软件架构思想
		M：Model，模型层，指工程中的JavaBean；
		V：VIew，视图层，指工程中的html和jsp等页面；
		C：Controller，控制层，指工程中的Servlet，作用是接受请求和响应浏览器；
	MVC的工作流程
		用户通过视图层发送到服务端，在服务端中请求Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据处理的请求处理的结果找到响应的vie视图，渲染数据后最终响应给浏览器；
	SpringMVC
		是Spring的一个子项目，SpringMVC是Spring为表述层（前台页面和后台Servlet）开发提供的一整套完备的解决方案；
		特点
			Spring家族原生产品，与IOC容器等基础设施无缝对接；
			基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一处理；
			表述层各细分领域需要解决的问题全方位覆盖；
			代码清新间接，大幅度提升开发效率；
			内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可；
			性能卓越，尤其适合现代大型、超大型互联网项目要求；
		配置Maven依赖
			spring-webmvc；
			logback-classic；
			thymeleaf；
			javax.servlet-api；
		配置web.xml
			默认配置方式
				SpringMVC的配置文件默认位于WEB-INF下；
				<!--配置DispatcherServlet-->
			    <servlet>
				  <servlet-name>SpringMVC</servlet-name>
				  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			    </servlet>

			    <!--/表示所有请求，但是不包括.jsp文件发送的请求-->
			    <servlet-mapping>
				  <servlet-name>SpringMVC</servlet-name>
				  <url-pattern>/</url-pattern>
			    </servlet-mapping>
			扩展配置方式（在resource资源文件下）
				<!--配置DispatcherServlet-->
			    <servlet>
				  <servlet-name>SpringMVC</servlet-name>
				  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
				  <!--配置SpringMVC配置文件的位置和名称-->
				  <init-param>
				    <param-name>contextConfigLocation</param-name>
				    <param-value>classpath:SpringMVC.xml</param-value>
				  </init-param>
				  <!--将前端控制器DispatcherServlet的初始化提前到服务器启动时-->
				  <load-on-startup>1</load-on-startup>
			    </servlet>

			    <!--/表示所有请求，但是不包括.jsp文件发送的请求-->
			    <servlet-mapping>
			  	  <servlet-name>SpringMVC</servlet-name>
				  <url-pattern>/</url-pattern>
			    </servlet-mapping>
		创建控制器
			创建一个控制器类用于处理
		配置SpringMVC配置文件
			<!--配置Thymeleaf前端解析器-->
			<bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
				<property name="order" value="1"/>
				<property name="characterEncoding" value="UTF-8"/>
				<property name="templateEngine">
					<bean class="org.thymeleaf.spring5.SpringTemplateEngine">
						<property name="templateResolver">
							<bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
								<property name="prefix" value="/WEB-INF/templates/"/>
								<property name="suffix" value=".html"/>
								<property name="templateMode" value="HTML5"/>
								<property name="characterEncoding" value="UTF-8"/>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		访问指定页面
			使用thymeleaf语法，th:href="@{/target}"
				如果是绝对路径，thymeleaf会自动添加上下文路径；
		小结
			浏览器发送请求，若请求地址符合前端控制器的url-pattern，请求就会被前端控制器DispatcherServlet处理，前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解
				的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求得方法，处理请求的方法需要返回一个字符串类型的视图名称，该视图会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图对应的页面；
	@RequestMapping注解
		将请求和处理请求的控制器方法关联起来，建立映射关系；
		相同的请求地址只能有一个RequestMapping映射关系；
		注解标识的位置
			标识一个类：设置映射请求的请求路径的初始信息；
			标识一个方法：设置映射请求的请求路径的具体信息；
			注：在类上标识，方法上也标识，页面跳转时要准确选择一个方法就要加上/类标识/方法标识；
		value属性
			通过请求的请求地址匹配请求映射；
			类型String[]，可以匹配多个请求地址；
			value属性必须设置；
		method属性
			通过请求方式（get和post）匹配请求映射；
			类型RequestMethod[]数组，表示该请求映射能够匹配多种请求方式的请求；
			若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报405错误；
			注：不设置method属性，不依靠请求方式作为请求映射的判断方式；
		根据请求方式的不同@RequestMapping有一些派生注解
			@GetMapping		处理get请求
			@PostMapping	处理Post请求
			@PutMapping		处理Put请求
			@DeleteMapping	处理Delete请求
			同样拥有value属性；
		params属性
			通过请求参数匹配请求映射；
			类型String[]，必须同时满足数组里的请求参数才会匹配请求映射
				"param"：要求请求映射所匹配的请求必须携带param请求参数；
				"!param"：要求请求映射所匹配的请求必须要不能携带param请求参数；
				"param=value"：：要求请求映射所匹配的请求必须携带param请求参数且param=value；
				"param!=value"：要求请求映射所匹配的请求参数但是param!=value；
			注：传入参数可以在@{"/请求(填写参数，多个参数用逗号隔开)"}里使用括号填写参数，或者使用？也可以传参；
		headers属性
			通过请求头中的参数来匹配请求映射；
			类型String[]，可以通过四种表达式设置请求头信息和请求映射的匹配关系
				"header"：要求请求映射所匹配的请求必须携带header请求头信息；
				"!header"：要求请求映射所匹配的请求不能携带header请求头信息；
				"header=value"：要求请求映射匹配的请求必须携带header请求头信息且header=value；
				"header!=value"：要求请求映射匹配的请求必须携带header请求头信息且header!=value；
			注：请求和headers属性不对应，显示404；
		ant风格路径（value属性）
			？：表示任意单个字符；
			*：表示0个或多个字符；
			**：表示一层或多层目录（使用**时，前后就不用写内容了，写了内容就相当于*）；
		SpringMVC支持路径中的占位符
			原始方式：/deleteUser?id=1；
			rest方式：/deleteUser/1；
			SpringMVC路径中的占位符常用于restful风格，当前路径中将某些数据通过路径的方式传输到服务器中，在@RrquestMapping注解的value属性中通过占位符{xxx}表示传输的数据，
				再通过@PathVariable注解，将占位符所表示的数据复制给控制器方法的形参；
			