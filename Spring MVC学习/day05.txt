1、处理静态资源
	Tomcat里的web.xml配置了DefaultServlet处理请求，但是因为工程中的web.xml配置了DispatcherServlet，在Tomcat中Servlet的选择遵循就近原则，
		所以DispatcherServlet覆盖了原来Tomcat设置的DefaultServlet，所以需要在工程中的SpringMVC.xml中启用对静态资源的访问<mvc:default-servlet-handler/>，
		当请求通过DispatcherServlet找不到时，再通过DefaultServlet去找，都找不到才会报404；
2、HttpMessageConverter
	报文信息转换器，将请求报文转换为Java对象，获Java对象转换为响应报文；
	HttpMessageConverter提供两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，ResponseEntity；
	@RequestBody
		可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行识别，当前请求的请求就会为当前注解所标识的形参赋值；
	注：get请求没有请求体，post请求才有请求体；
	@RequestBody
		封装请求体的信息（name=value&name=value形式）
		使用
			@RequestMapping("/testRequestBody")
			public String testRequestBody(@RequestBody String requestBody){
				System.out.println("RequestBody: " + requestBody);
				return "target";
			}
	@RequestEntity
		封装请求报文，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeader()获取请求头信息，通过getBody()获得请求体信息；
		使用
			@RequestMapping("/testRequestEntity")
			public String testRequestEntity(RequestEntity<String> requestEntity){
				//获取当前请求的整个请求信息
				//获取请求头信息(返回的是HttpHeaders对象，可以继续调用方法获取请求头中具体的值)
				System.out.println("获取请求头：" + requestEntity.getHeaders().);
				//获取请求体信息
				System.out.println("获取请求体：" + requestEntity.getBody());
				return "target";
			}
	获取Response
		通过ServletAPI的response对象响应浏览器数据
			@RequestMapping("/testResponse")
			public void testResponse(HttpServletResponse response) throws IOException {
				//响应解决中文乱码（方式一）
				//设置编码
				response.setCharacterEncoding("UTF-8");
				//通知解码
				response.setHeader("Content-Type", "text/html;charset=UTF-8");
				//响应解决中文乱码（方式二）
				//设置HttpServletResponse使用UTF-8编码，也通知游览器使用指定编码
				response.setContentType("text/html;charset=UTF-8");
				response.getWriter().print("ServletAPI的response对象响应浏览器数据");
			}
		通过@ResponseBody注解响应浏览器
			加上@ResponseBody注解后，控制器方法的返回值就变成了响应中的内容返回给浏览器，不加@ResponseBody注解则返回的是作为视图交给Thymeleaf解析；
		处理json
			当响应的数据是一个JavaBean时就需要使用json来处理响应；
			SpringMVC中使用json
				导入jackson的依赖
					<dependency>
					  <groupId>com.fasterxml.jackson.core</groupId>
					  <artifactId>jackson-databind</artifactId>
					  <version>2.12.3</version>
					</dependency>
				在Spring配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器（MappingJoackson2HttpMessageConverter），可以将响应到浏览器的Java对象转换成json格式的字符串
					<mvc:annotation-driven />
				在处理器方法上使用@ResponseBody注解进行标识；
				将Java对象直接作为控制器的方法的返回值返回，就会自动转换为json格式的字符串；
			注：实体类和map转换成json对象，list转换成json数组；
		处理ajax
			首先设置一个ajax的作用范围，并且给其中一个标签绑定事件
				<div id="app">
					<a @click="testAxios" th:href="@{/testAxios}">SpringMVC处理ajax请求</a>
				</div>
			再导入vue.js和axios.min.js；
			给事件写上具体的内容
				<script type="text/javascript" th:src="@{/static/js/vue.js}"></script>
				<script type="text/javascript" th:src="@{/static/js/axios.min.js}"></script>
				<script type="text/javascript">
					new Vue({
					   el:"#app",
						methods:{
							testAxios:function (event){
							   axios({
								   //请求方式
								   method:"post",
								   //触发地址
								   url:event.target.href,
								   //请求要传递的参数
								   params:{
									   username:"admin",
									   password:"123456"
								   }
							   }).then(function (response){
								   alert(response.data);
							   });
							   //取消a标签的默认行为
							   event.preventDefault();
						   }
						}
					});
				</script>
		@RestController注解
			@RestController注解是S平日那个MVC提供的一个符合注解，标识在控制器类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加@ResponseBody注解；
		ResponseEntity类型
			用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文；
			文件的下载和上传
				使用ResponseEntity类型来处理文件的上传和下载功能；
				实现下载
					@RequestMapping("/testDown")
					public ResponseEntity<byte[]> testDown(HttpSession session) throws IOException {
						//获取servlet上下文信息
						ServletContext servletContext = session.getServletContext();
						//获取下载文件的真实路径
						String realPath = servletContext.getRealPath("/static/res/123.png");
						//将文件读入进输入流
						InputStream is = new FileInputStream(realPath);
						//创建字节数组，数组长度和输入流的长度一样
						byte[] bytes = new byte[is.available()];
						//将输入流读入到字节数组中
						is.read(bytes);
						//创建响应头对象
						MultiValueMap<String, String> headers = new HttpHeaders();
						//向响应头对象中添加信息（Content-Disposition下载方式，attachment下载形式（以附件的形式下载），filename下载下来的文件名）
						headers.add("Content-Disposition", "attachment;filename=123.jpg");
						//设置响应码
						HttpStatus statusCode = HttpStatus.OK;
						//创建ResponseEntity对象，并使用字节数组、响应头和状态码进行初始化
						ResponseEntity<byte[]> responseEntity = new ResponseEntity<byte[]>(bytes, headers, statusCode);
						//关闭输入流
						is.close();
						//ResponseEntity响应给浏览器
						return responseEntity;
					}
				实现上传
					上传文件需要使用post请求，因为post请求将参数封装在请求体中；
					添加依赖
						<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
						<dependency>
							<groupId>commons-fileupload</groupId>
							<artifactId>commons-fileupload</artifactId>
							<version>1.4</version>
						</dependency>
					在控制器方法中添加MultipartFile类型的参数（Java中将文件封装成File类，SpringMVC中将文件封装在MultipartFile）；
					SpringMVC配置文件中配置文件上传解析器，将上传的文件封装为MultipartFile对象
						<!--配置文件上传解析器，将上传的文件封装为MultipartFile，SpringMVC是根据id读取bean，且该解析器的id必须为multipartResolver-->
						<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>
					使用MultipartFile.transferTo(File file)方法上传文件
						public String testDown(MultipartFile photo, HttpSession session) throws IOException {
							String originalFilename = photo.getOriginalFilename();
							ServletContext servletContext = session.getServletContext();
							String photoPath = servletContext.getRealPath("photo");
							File file = new File(photoPath);
							if(!file.exists()){
								file.mkdir();
							}
							//设置文件上传路径
							String finalPath = photoPath + File.separator + originalFilename;
							photo.transferTo(new File(finalPath));
							return "target";
						}
					注：SpringMVC是根据id来获取bean；
						控制器里面的MultipartFile的参数名要跟页面的name一致；
						解决文件重名问题，将UUID作为文件名；