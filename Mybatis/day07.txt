1、运行原理
	Mybatis四大对象
		Executor、ParameterHandler、ResultSetHandler和StatementHandler；
	运行流程
		sqlSessionFactory的初始化
			创建SqlSessionFactoryBuilder对象；
			调用bulid方法创建一个解析器parser（XMLConfiBuild对象）；
			通过解析器解析全局配置文件中的每一个节点，将解析的结果保存在Configuration对象中；
			解析mapper.xml文件，将其中的每一个元素信息解析出来保存在全局配置中，将增删改查的每一个标签每一个属性都封装成一个MappedStatement，一个MappedStatement就代表一个增删改查标签的详细信息；
			返回封装了所有信息的Configuration对象；
			依靠返回的Configuration对象创建DefaultSqlSession对象；
			返回创建的DefaultSqlSessionFactory对象（实现了SqlSessionFactory接口）；
			注：Configuration对象保存了所有信息；
		openSession获取sqlSession
			调用DefaultSqlSessionFactory的openSession，最终调用openSessionFromDataSouece；
			通过Configura对象获取信息，创建tx（事务类）；
			创建Mybatis的Executor对象，根据其在全局配置中的类型，创建出SimpleExecutor、ResultExecutor、BatchExecutor
				如果开启了二级缓存就会用CacheExecutor将Executor包装起来，在后续的查询方法中使用缓存；
				每一个Executor被创建时都要用拦截器进行包装；
			返回Executor对象，并将其放进DefaultSqlSession对象中（包含Configuration对象）；
			最终把DefaultSqlSession（包含Executor和Configuration）返回给SqlSession；
		getMapper获取代理对象
			调用DefaultSqlSession中的getMapper，再调用Configuration中的getMapper；
			再调用MapperRegistry中的getMapper，根据接口类型获取MapperProxyFactory；
			通过代理工厂调用newInstance方法创建MapperProxy（实现了InvocationHandler接口）；
			最终创建一个代理对象，并返回MapperProxy；
	查询操作
		MapperProxy调用Invoke方法时，会将该方法封装成NapperMethod，再来执行MapperMethod的execute方法；
		先判断sql语句是那种类型，接着把参数map；
		调用DefaultSqlSession的selectOne方法；
		调用selectList方法（如果是查询单个就返回list中的第一个值）；
		调用executor中的query方法；
		获取MappedStatement中的sql信息，把key（方法id+参数）保存在缓存（CacheKey对象）中；
		最终会调用真正的executor（配置文件里的Executor）的query方法；
		查看本地缓存是否有数据，没有就调用queryFromDatabase方法，查出数据后就把数据存在本地缓存中；
		调用doQuery方法，在其中创建StatementHandler对象，PreparedStatementHandler（创建PreparedStatementHanler会调用拦截器），同时也会创建ParameterHandler和ResultSetHandler；
		预编译sql产生PreparedStatementHandler；
		调用ParameterHandler设置参数，调用TypeHandler给sql预编译设置参数；
		使用PreparedStatementHandler的query方法查询数据，并用ResultSetHandler封装结果；
		返回结果；
		注：StatementHandler（处理sql语句预编译，设置参数于等相关工作），ParameterHandler设置预编译参数，ResultSetHandler（处理查询后的结果，在整个过程中，进行数据库类型和JavaBean类型的映射）；
	总结
		根据配置文件（全局，sql映射）初始化出Configuration对象；
		创建一个DefaultSqlSession对象，他里面包含Configuration以及Executor(根据全局配置文件中的DefaultExecutorType创建出对应的Executor)；
		DefaultSqlSession.getMapper()拿到Mapper接口对应的MapperProxy；
		执行增删改查方法，调用DefaultSqlSession的增删改查（会创建一个StatementHandler对象的同时会创建ParameterHandler和ResultSetHandler）
			调用StatementHandler预编译参数以及设置参数值；
			使用ParameterHandler给sql设置参数；
			调用StatemenHandler的增删改查方法；
			使用ResultSetHandler封装结果；
		注：四大对象每一个创建的时候都会调用拦截器方法（interceptorChain.pluginAll方法）；
		