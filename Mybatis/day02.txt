1、全局配置文件
	<properties/>标签
		Mybatis可以使用properties来引入外部properties配置文件的内容；
		属性
			resource：引入类路径下的资源；
			url：引入网络资源；
		在全局配置文件中取出配置文件中每个属性的值使用${}；
		注：一般将数据库的连接信息作为外部文件引入；
	<settings/>标签
		包含了很多重要的设置项；
		<setting/>标签代表每一个设置项；
			属性
				name：设置项名；
				value：设置项取值；
	<typeAliases/>标签
		别名处理器，可以为我们的java类型起别名；
		<typeAlias/>标签代表一个别名（在映射xml文件中的returnType属性中可以使用别名）；
			属性
				type：指定要起别名的类型全类名，默认别名就是类名小写；
				alias：指定新别名；
		<package/>标签表示为某个包下的所有类批量起别名；
			属性
				name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名）；
		注：别名不区分大小写；
			在类上使用@Alias注解为类起别名；
			自定义的别名和Mybatis封装好的别名不能一样，否则可能会出错；
	<typeHandlers/>标签
		类型处理器，实现Java类型和数据库类型的映射；
	<plugins/>标签
		插件标签用来导入插件，可以拦截四大对象；
	<environments/>标签
		配置Mybatis环境，可以配置多种环境
		属性
			default：用于改变当前环境下具体使用哪一个环境；
		<environment/>标签代表配置的一个环境
			属性
				id：表示当前环境的唯一标识；
			配置一个具体环境信息，必须有两个标签<transactionManager/>和<dataSource/>
				<transactionManager/>事务管理器标签
					属性
						type：事务的类型（JDBC（JdbcTransactionFactory类）和MANAGED（ManagedTransactionFactory类）两种）
							  自定义事务管理器（实现TransactionFactory接口），type指定为全类名；
				<dataSource/>标签
					属性
						type：数据源类型（UNPOOLED不使用连接池|POOLED使用连接池|JNDI）
							  自定义数据源：实现DataSourceFactory接口，type指定为全类名；
				注：<transactionManager/>和<dataSource/>在Configuration类中定义了type中的类型；				
	<databaseldProvider/>标签
		让Mybatis可以根据不同的数据库执行不同的sql语句；
		属性
			type：指定<databaseldProvider/>标签支持的类型，DB_VENDOR作用是得到数据库厂商的标识；
		<property/>为不同的数据库标识起别名
			属性
				name：数据库的标识；
				value：别名；
		注：为特定的sql语句指定数据库，在映射文件的sql语句标签上添加databaseId属性即可；
	<mapper/>标签
		注册一个sql映射；
		属性
			resource：引用类路径下的sql映射文件（注册文件）；
			url：引入网络路径或者磁盘路径下的sql映射文件（注册文件）；
			class：引用（注册）接口，在接口上使用注解实现sql映射（使用注解就不需要在mapper映射文件中配置信息了）；
		批量注册
			<package/>标签实现批量注册；
				属性
					name：批量注册的包名；