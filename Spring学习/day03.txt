1、代理模式
	静态代理
		角色分析
			抽象角色：一般使用接口或者抽象类来解决；
			真实角色：被代理的角色；
			代理角色：代理真实角色，代理后我们一般会做一些附属操作；
			客户：访问代理对象的人；
		静态代理模式的优点
			可以使真实角色的操作更加纯粹，不用去关注其他事情；
			其他事情交给代理角色，实现了业务的分工；
			其他事情发生扩展时，方便集中管理；
		静态代理的缺点
			一个真实角色就会产生一个代理角色；
	注：代理用于将代理角色与真实角色解耦；
	动态代理
		动态代理和静态代理的角色一样；
		动态代理类是动态生成的，不是我们直接写好的；
		动态代理分为两大类：基于接口的动态代理（JDK动态代理）和基于类的动态代理（cglib）；
		动态代理步骤
			生成代理类的中间类实现InvocationHandler接口，在该接口中调用Proxy.newProxyInstance创建代理类；
			通过动态生成的代理类实现对被代理类接口的实现；
		注：动态代理代理的是一个接口，一般就是对应的一类业务；
			一个代理类可以代理多个类，只要是实现了同一个接口即可；
2、AOP（面向切面编程）
	通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，是OOP的延续；
	Aop在Spring中的作用
		横切关注点：跨越应用程序多个模块的方法或功能，即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点；
		切面：横切关注点被模块化的特殊对象，即，它是一个类；
		通知：切面必须要完成的工作，即，它是类中的一个方法；
		目标：被通知的对象；
		代理：向目标对象应用通知之后创建的对象；
		切入点：切面通知执行的“地点”的定义；
		连接点：与切入点匹配的执行点；
	AOP的实现
			实现一（接口实现）
				实现MethodBeforeAdvice接口（在调用方法前执行）里的before方法
					public void before(Method method, Object[] objects, Object target) throws Throwable
						method：要执行的目标对象的方法；
						args：参数；
						target：目标对象；
				实现AfterReturningAdvice接口（在调用方法后执行）里的afterReturning方法
					public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable
						returnValue：返回值；
				AOP配置
					首先在xml文档中引入aop命名空间：xmlns:aop="http://www.springframework.org/schema/aop"；
					接着引入aopxsd:http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd;
					配置完bean后配置AOP
						<!--配置AOP-->
						<aop:config>
							<!--配置切入点-->
							<aop:pointcut id="pointcut" expression="execution(* com.hejianfeng.service.UserServiceImpl.*(..))"/>
							<!--执行环绕增强-->
							<!--将log这个bean切入到切入点所指向的那个类-->
							<aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
							<aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
						</aop:config>
			方式二（自定义类实现先后执行）
				自定义一个类，类中定义的方法是要被切入的方法；
				配置xml，将自定义的类注入IOC容器；
				配置AOP
					<aop:config>
						<!--自定义切面，ref表示要被引用的类-->
						<aop:aspect ref="aopAspect">
							<!--切入点-->
							<aop:pointcut id="point" expression="execution(* com.hejianfeng.service.UserServiceImpl.*(..))"/>
							<!--通知-->
							<aop:before method="before" pointcut-ref="point"/>
							<aop:after method="after" pointcut-ref="point"/>
						</aop:aspect>
					</aop:config>
	使用注解实现AOP
		首先自定义一个类作为切面(在该类上添加注解@Aspect，标注这个类是一个切面)；
		在该类下定义方法，使用@Before("execution()")注解标注该方法在调用前执行；
						  使用@Aefore("execution()")注解标注该方法在调用后执行；
						  使用@Around("execution()")注解标注该方法实现环绕增强；
						  注：@Around注解可以传入ProceedingJoinPoint类型的参数作为接入点ProceedingJoinPoint.proceed()表示执行方法；
		在xml中配置该类（xml中要开启aop注解）	