1、索引优化
	最左前缀法则：
	两表优化
		左连接需要在右表上添加索引，left join条件用于确定如何从右表搜索行，左边一定都有，所以需要在右边添加索引；
		右连接和左连接同理，但是需要反过来；
	三表优化
		索引需要设置在经常查询的字段上
	Join语句的优化
		尽可能减少Join语句中的NestedLoop的循环总次数，永远用小结果集驱动大结果集；
		优先优化NestedLoop的内层循环；
		保证Join语句中被驱动表上Join条件字段已经被索引；
		当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝啬JoinBuffer的设置；
	索引失效
		常见原因：
			索引了多列，未遵守最佳左前缀法则（查询从索引的最左前列开始并且不跳过索引中的列，建立索引的第一个字段不能丢失）；
			在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描；
			存储引擎使用索引中范围条件右边的列（使用范围查找时索引会失效）；
			尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *的使用；
			mysql在使用不等于时无法使用索引，会导致全表扫描；
			is null和is not null也无法使用索引；
			like以通配符开头（%abc...）mysql索引失效会变成全表扫描的操作（可是使用覆盖索引加上左右都加%解决索引失效问题或是将%加在右边）；
			字符串不加单引号会导致索引失效；
			少用or，用or连接会导致索引失效；
	索引使用
		使用select查找索引字段时，需要用到覆盖索引；
		使用order by排序时，需要排序的索引字段必须要按照索引的顺序；
		使用group by聚合时，group by后的索引字段需要按序排列；
	索引案例
		where a=3									使用到a
		where a=3 and b=5							使用到a，b
		where a=3 and b=5 and c=4					使用到a，b，c
		where b=3 或 where b=3 and c=4 或 where c=4	什么也没用到
		where a=3 and c=5							使用到a
		where a=3 and b>4 and c=5					使用到a，b
		where a=3 and b like 'kk%' and c=4			使用到a，b，c
		where a=3 and b like '%kk' and c=4			使用到a
		where a=3 and b like '%kk%' and c=4			使用到a
		where a=3 and b like 'k%kk%' and c=4		使用到a，b，c

2、查询截取分析
	查询优化
		永远小表驱动大表（小的数据集驱动大的数据集）
			select * from A where id in （select id from B）
			等价于
			for select id from B
			for select * from A where A.id = B.id
			当B表的数据集必须小于A表的数据集时，用in优于exists
			select * from A where exists （select 1 from B where B.id=A.id）
			等价于	
			for select * from A
			for select * from B where B.id=A.id
			当A表的数据集小于B表的数据集时，用exists优于in
		select ... from table where exists（subquery）
			语法解释：将主查询的数据，放到子查询中做条件验证，根据验证结果（TRUE或FALSE）来决定主查询的结果是否予以保留；
		order by关键字优化
			SQL支持两种方式的排序，filesort和index，index效率高，filesort效率低；
			filesort排序优化
				增大sort_buffrt_size参数的设置；
				增大max_length_for_data参数的设置；
			order by使用index方式排序
				order by语句使用索引最左前列；
					order by a,b,c
					order by a,b
					order by a
				where使用索引的最左前缀定义为常量，则order by能使用索引；
						where a=const order by b,c
			order by不能使用索引排序
				order by a asc,b desc,c desc	/*排序不一致*/
				where g=const order by b,c  	/*丢失a索引*/
				where a=const order by c		/*丢失b索引*/
				where a=const order by a,d		/*d不是索引的一部分*/
				where a in(...) order by b,c	/*对于排序来说，多个相等条件也是范围查询，a不是定值*/
		group by关键字优化
			group by实质是先排序后进行分组，遵守索引建的最佳左前缀；
			当无法使用索引时，增大max_for_sort_data参数的设置+增大sort_buffer_size参数的设置；
			where高于having，能写在where限定的条件就不要去having限定；