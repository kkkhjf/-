1、static关键字
		static可以用来修饰属性、方法、代码块和内部类；
		static属性存在于方法区的静态域中；
		使用static修饰的变量叫静态变量；属性按照是否被static修饰分为静态属性和非静态属性；
		静态变量：
				多个对象公用一个静态变量；
				静态变量随着类的加载而加载，可以通过“类.静态变量”的方式调用；
				静态变量加载要早于对象的创建；
				由于类只会加载一次，静态变量在内存中也只会存在一份，存在方法区的静态域中；
				类变量可以被类和对象调用，实例变量则只能被对象调用；

		使用static修饰静态方法：
				随着类的加载而加载，可以通过”类.方法“调用；
				静态方法中只能调用静态方法或属性；
				非静态方法中既可以调用非静态的方法或属性，也可以调用非静态的属性或方法；
				在静态方法内，不能使用this和super关键字。
		
		开发中如何判断一个属性或方法需要使用static：
				属性可以被多个对象所共享的，不会随着对象的不同而不同；
				操作静态属性的方法，通常设置为static；
				工具类中的方法，通常设置为static。 

		单例设计模式：
				大量的实践中总结和理论化之后优化后的代码结构、编程风格以及解决问题的思考方式，类似于模板；
				所谓单例设计模式就是在指只能存在一个实例对象。
				饿汉式和懒汉式的区别：
						饿汉式一开始就创建好了对象，懒汉式只有在系统需要时才开始创建对象
		 		

2、main（）方法
		main（）方法的使用说明：
				main（）方法作为程序的入口；
				main（）方法也是一个普通的静态方法；
				main（）方法可以作为于控制台的交互方式  。

代码块：
		代码块形式：
				{
					//代码块
				}
		代码块说明：
				用来初始化类、对象，如果要用关键字修饰只能使用static；
				代码块分为静态代码块和非静态代码块：
						静态代码块（内部可以输出语句，随着代码的加载而执行，在类的一个生命周期只执行一次，初始化类的信息，一个类里可以定义多个静态代码块，只能调用静态的属性和方法）；
						非静态代码块（内部可以有输出语句，随着对象的创建而执行，每次创建对象时都会执行一次，初始化对象的信息，可以调用所有的属性和方法）。
		对属性的赋值（先后顺序）：
				默认赋值、显式初始化/在代码块中赋值、构造器中初始化、有了对象以后用“对象.属性”方法构造。
		
		注：如果一个类中定义了多个静态代码块，有按顺序执行，且优先于非静态代码块执行。由父及子，静态先行。 
		       
3、final关键字：
		final关键字可以修饰类、方法和属性；
		final修饰一个类：
				该类不能被其他类继承；
		final修饰一个方法：
				该方法不能被重写；
		final修饰一个变量：
				此时的变量不能在被更改(类似于const），可以初始化的方法（显式初始化、代码块中初始化、构造器中初始化）		
		final修饰一个形参：
				在方法内只能调用该形参，不能修改该形参
		static final（全局常量）：
				用来就是属性和方法。
        
4、回顾：
		public static void main(String[] args)
				权限修饰符：private、缺省（default）、protected、public--->封装性；
				修饰符：static、final、abstract、native可以修饰方法；
				返回类型：无返回值、有返回值--->return；
				方法名：需要满足标识符命名规范；
				形参列表：重载和重写：参数的传递机制体现：体现对象的多态性；
				方法体：体现方法的功能。
		接口和抽象类：
		接口抽象的是抽象类的方法，与实现接口子类的关系是"有没有"的关系，即子类抽象的事物，有没有这个方法。抽象类抽象的是类的方法，
		    与实现抽象类的子类的关系是"是不是"的关系。类是对事物的抽象，抽象类是对类的抽象，接口是对抽象类的抽象。
