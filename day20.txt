1、集合List中的常用方法
		void add(int index,Object ele)在index位置插入ele元素
		void addall(int index,Collection eles)从index位置开始将eles中所有元素添加进来
		Object get（int index）获取指定index位置的元素
		int indexOf(Object obj)返回obj在集合中首次出现的位置，如果不存在返回-1
		int LastIndexOf(Object obj)返回obj在当前集合末次出现的位置
		Object remove(int index)移除指定index位置的元素，并返回此元素
		Object set(int index,Object ele)设置指定index位置的元素为ele
		List subList(int fromIndex,int toIndex)返回从fromIndex到toIndex位置的子集合，左闭右开
		常用方法：
				增：add(Obkect obj)
				删：remove(int index)/remove(Object obj)
				改：set(int index,Object ele)
				查：get(int index)
				插：add(int index,Object ele)
				长度：size()
				遍历：Iterator迭代器方式、foreach、普通循环
        
2、set接口
    set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法；
        HashSet：作为set接口的主要实现类，线程不安全，可以存储null；
        LinkedHash：作为HashSet的子类，遍历其内部数据时，可以按照添加的顺序遍历；
        TreeSet：可以按照添加对象的指定属性，进行排序；
    要求：向Set中添加的数据，其所在的类一定要重写hashCode()和equals()；
         重写的hashCode()和equals()尽可能保持一致性（相等的对象必须具有相等的散列码）；
         重写hashCode()函数时，对象中作为equals()方法比较的属性都应该用来计算hashCode值。
    set：存储无序，不可重复的数据
        无序性：不等于随机性，存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据哈希值决定的；
        不可重复性：保证添加的元素按照equals()判断时，不能返回true，即相同的元素只能添加一个；
    添加元素的过程（HashSet为例）
        向HashSet中添加元素a，首先要调用元素a所在类的hashCode()方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出在HahSet底层数组中的存放位置，
            判断此位置上是否已经有元素；如果此位置上没有其他元素，则元素a添加成功（情况1）；如果此位置上有其他元素b（或以链表形式存在多个元素），则比较元素a与
            元素b的hash值，如果hash值不同，则元素a添加成功（情况2）；如果hash值相同，进而需要调用元素a所在类的equals()方法：equals()返回true元素a添加失败，
            equals()返回false，元素a添加成功（情况3）。
        对于情况2和情况3而言：元素a与已经存在指定索引位置上数据以链表的方式存储（jdk7中新元素指向原来的元素，jdk8中反过来）
    LinkedHashSet的使用
        LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据；
        对于频繁的遍历操作，LinkedHashSet效率高于HashSet。
    TreeSet的使用
        向TreeSet中添加的数据，要求是相同类的对象；
        需要使用两种排序方法（comparaTo()和comparator()）
        自然排序中（comparaTo()），比较两个对象是否相同的标准为：compareTo()返回0，不再是equals()；
        定制排序中（comparator()），比较两个对象是否相同的标准为：compare()返回0，不再是equals()。


补充说明：
    Collection集合与数组间的转换
    	集合--->数组：toArray()
	Object[] arr = coll.toArray();
	数组--->集合：调用Arrays类的静态方法aSList()
	    List<String> list = Arrays.asList(new String[]{"AA","BB","CC"});
    
