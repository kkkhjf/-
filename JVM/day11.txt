1、类加载
	Java中数据类型分为基本数据类型和引用数据类型，基本数据类型由虚拟机预先定义，引用数据类型则需要进行类的加载；
	加载阶段
		Java类的字节码文件加载到机器内存中，并在内存中构建处Java类的原型（类模板对象）；
			类模板对象就是Java类在JVM内存中的一个快照，JVM将从字节码文件中解析出的常量池、类字段
			类方法等信息存储到类模板中，这样JVM在运行期便能通过内模板获取Java类中的任意信息，能够对Java类的成员变量进行遍历，也能进行Java方法的调用（反射机制即基于这一基础）；
		加载阶段完成的操作
			查找并加载类的二进制数据，生成Class的实例；
			加载类时，JVM必须完成以下事情
				通过类的全名，获取类的二进制数据流；
					虚拟机获取二进制流的方式
						通过文件系统读入一个class后缀的文件；
						读入jar、zip等归档数据包，提取类文件；
						事先存放在数据库中的类的二进制数据；
						使用类似于HTTP之类的协议通过网络进行加载；
						在运行时生成一段Class的二进制信息等；
					注：如果魔数不是cafebabe则会抛出ClassFormatError；
				解析类的二进制数据流为方法区内的数据结构（Java类模型）；
					类模型在JVM中创建相应的类结构，类结构会存储在方法区；
					类将.class文件加载至元空间后，会在堆中创建一个java.lang.Class对象，用来封装类位于方法区内的数据结构，该Class对象是加载类的过程中创建的，每个类都对应一个Class类型的对象；
					注：Class类的构造方法是私有的，只有JVM能够创建；
				在堆中创建java.lang.Class类的实例，表示该类型，作为方法区这个类的各种数据的访问入口；
			注：数组类的加载本身并不是由类加载器负责创建，而是JVM运行时根据需要而直接创建的，但是数组的元素类型仍然需要依靠类加载器去创建
					如果数组的元素类型时引用类型，那么就遵循定义的加载过程递归加载和创建数组A的元素类型；
					JVM使用指定的元素类型和数组维度来创建新的数组类；
				如果数组的元素类型时引用类型，数组类的可访问性就由元素类型的可访问性决定，否则数组类的可访问类型就被定义为public；
	连接阶段（验证、准备和解析）
		验证阶段
			当类加载到系统后，就开始链接操作，验证是链接操作的第一步，目的是保证记载的字节码是合法、合理并符合规范的；
			验证的步骤
				格式检查
					魔数检查；
					版本检查；
					长度检查；
				语义检查
					是否继承final；
					是否有父类；
					抽象方法是否有实现；
				字节码验证
					跳转指令是否指向正确位置；
					操作数类型是否合理；
				符号引用验证
					符号引用的直接引用是否存在；
				注：格式验证回合加载阶段一起执行，验证通过之后，类加载器才会成功将类的魏晋至数据信息加载到方法区中；
					格式验证之外的验证操作将会在方法区进行；
			具体说明
				格式验证
					魔数是否为cafebabe，编译的jre版本和解释运行的jre版本是否一致，数据中每一项是否都拥有正确的长度等；
				语义检查	
					是否所有的类都有父类的存在；
					是否一些被定义为final的方法或者类被重写或继承了；
					非抽象类是否实现了所有抽象方法或者接口方法；
					是否存在不兼容的方法（比如方法的签名除了返回值不同，其他都一样，这种方法会让虚拟机无从下手调度；abstract情况下的方法，就不能是final了）；
				字节码验证
					在字节码的执行过程中是否会跳转到一条不存在的指令；
					函数的调用是否传递了正确类型的参数；
					变量赋值是不是给了正确的数据类型等；
					注：栈映射桢就是在这个阶段，用于检测在特定的字节码处。其局部变量表和操作数栈是否有着正确的数据类型，通过这个阶段的检查也不能说明这个类是完全没有问题的；
				符号引用验证
					Class文件在其常量池会通过字符串记录自己将要使用的其他类或者方法，在验证阶段虚拟机就会检查这些类或者方法确实是存在的，并且当前类有权限访问这些数据，如果一个需要使用类无法在系统中找到，则会抛出NoClassDefFoundError，如果一个方法无法被找到，则会抛出NoSuchMethodError；
		准备阶段
			虚拟机为这个类分配相应的内存空间，并设置默认初始值；
			注：Java并不支持boolean类型，内部实现是由int完成，默认为0；
				如果基本数据类型的字段用static final修饰不会在准备阶段设置默认值，因为final在编译的时候就会分配了，准备阶段会显式赋值；
				如果使用字面量的方式定义一个字符串的常量话，也是在编译阶段进行赋值，准备阶段直接进行显式赋值；
				准备阶段并不会像初始化阶段中那样会有初始化或者代码被执行；
		解析阶段
			将类、接口和符号引用转化为直接引用（告诉其在内存中的地址）；
			解析就是将符号引用转为直接引用，也就是得到类、字段、方法在内存中的指针或者偏移量，如果直接引用存在，那么就肯定系统中存在该类、方法或者字段，但是存在符号引用，不能确定系统中一定存在该结构；
			当在Java代码中直接使用字符串常量时，就会在类中出现CONSTANT_String，它表示字符串常量，并且会引用一个CONSTANT_UTF8的常量项，在Java虚拟机内部运行中的常量池中，会维护一张字符串拘留表，它会保存所有出现过的字符串常量，并且没有重复项；
				注：String.intern()方法可以得到一个字符床在拘留表中的引用，任何字面相同的字符串的String.intern()方法返回值总是相等的；
		
	初始化阶段
		该阶段为类的静态变量赋于正确的初始值；
		具体描述
			类的初始化是类装载的最后一个阶段，此时类才会开始执行Java字节码（到了初始化阶段才会真正开始执行类中定义的Java程序代码）；
			初始化阶段的重要工作是执行类的初始化方法：<cliinit>()方法
				该方法仅能由Java编译器生成并由JVM调用，程序开发者者无法自定义一个同名的方法，更无法直接在java程序中调用该方法；
				<clinit>()方法由静态类成员的赋值语句以及static语句块合并产生；
			注：在加载一个类之前，虚拟机总会视图加载该类的父类，因此父类的<clinit>总是在字类<clinit>之前被调用，也就是说父类的static块优先级高于字类；
				不会产生<clinit>方法的情况
					非静态的字段不管是否进行了显式赋值，都不会产生<clinit>方法；
					静态的字段没有显式赋值也不会产生<clinit>方法；
					对于声明为static final的基本数据类型的字段，不管是否进行了显式赋值，都不会生成<clinit>方法；
					对于基本数据类型的字段来说，如果使用static final修饰，则显式赋值(直接赋值常量，而非调用方法)通常是在链接阶段的准备环节进行；
					对于String来说，如果使用字面量的方式赋值，使用static final修饰的话，则显式赋值通常是在连接阶段的准备环节进行；
					最终结论
						使用static + final修饰，且显式赋值中不涉及到方法或者构造器调用的基本数据类型或String类型的显式赋值，是在链接阶段的准备环节进行（不会执行<clinit>()方法）；
		<clinit>的线程安全性
			虚拟机会保证一个类的<clinit>方法在多线程环境中被正确的加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕；
			如果一个类的<clinit>()方法有耗时很长的操作，就可能造成多个线程阻塞，引发死锁；
		类的主动使用和被动使用
			主动使用（会调用<clinit>()方法，Java虚拟机规定，一个类或者接口在初次主动使用前，必须进行初始化）
				创建一个类的实例时，new、反射、克隆和反序列化等；
				当调用类的静态方法时，即使用了字节码invokespecial指令；
				当类、接口的静态字段是（final修特殊考虑），比如使用getstatic或者putstatic（对应访问变量、赋值变量操作）； 
				当使用java.lang.reflect包中的方法反射类的方法时，比如：Class.forName("com.hejianfeng.JavaTest")；
				当初始化字类时，如果发现其父类还没有进行过初始化，则需要先出发其父类的初始化；
					注：这条规则并不适用于接口，在初始化一个类时并不会先初始化它所实现的接口，在初始化一个接口时并不会先初始化它的父接口；
				如果一个接口定义了default方法，那么直接实现或者间接实现该接口的类的初始化，该接口要在其之前初始化；
				当虚拟机启动时，用于需要制定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类；
			被动使用（不会调用<clinit>()方法）
				当访问一个静态字段时，只有真正声明这个字段的类才会被初始化；
					当通过子类引用父类的静态变量，不会导致子类的初始化；
				通过数组定义类引用，不会触发此类的初始化（只定义一个对象的数组不会触发<clinit>()方法）；
				引用常量不会触发此类或接口的初始化，因为常量在链接阶段就已经被显式赋值了；
				调用ClassLoader类的LoadClass()方法加载一个类，并不是对类的主动使用，不会导致类的初始化；
	类的使用
		任何一个类型在使用之前都必须经理过完整的加载、拦截和初始化3个类加载步骤，一旦一个类型成功经理过这3个步骤之后，便可以在长序中访问和调用它的静态成员信息，或者new关键字为其创建对象实例；
	类的卸载
		类、类加载器和类的实例之间的引用关系
			在类加载器的内部实现中，用一个Java集合来存放所加载类的引用，而一个Class对象总是会引用它的类加载器，调用Class对象的getClassLoader()方法，就能获得它的类加载器，因此，代表某个类的Class实例与其类的加载器之间为双向关联关系；
		类的生命周期
			当一个类被加载、连接和初始化后，生命周期开始，当代表该类的Class对象不再被引用，即不佳而初级时，Class对象就会结束生命周期，该类在方法区内的数据也会被卸载，生命周期结束；
			注：一个类何时结束生命周期，取决于代表它的Class对象何时结束生命周期；
				判断一个类型是否属于“不再被使用的类”的条件
					该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例；
					该加载类的类加载器已经被回收；
					该类对应的java.lang.Class对象没有任何地方被引用；
		启动类加载器加载的类型在整个运行期间是不可能被卸载的；
		被系统类加载器和扩展类加载器加载的类型在运行期间不太可能被卸载，因为系统类加载器实例或者扩展类的实例基本上在整个运行期间总能直接或间接的被访问；
		被开发这自定义的类加载器实例加载的类型只有很简单的上线纹环境中才能被卸载，而且一般还要借助强制调用虚拟机的垃圾收集功能才可以做到，在稍微复杂点的应用场景中（比如，很多时候用户在开发自定义类加载器实例时采用缓存的策略以提高系统性能），被加载的类型在运行期间也是几乎不太可能被卸载（至少卸载的时间是不确定的）；
		综合以上三点一个已经加载的类型被卸载的几率很小，至少被卸载的时间是不确定的；
2、类加载器
	类加载器是JVM执行类加载机制的前提
	ClassLoader的作用（ClassLoader在整个加载阶段只能影响到类的加载阶段）
		ClassLoader是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过各种方式将Class信息的二进制数据流读入JVM内部，转换为一个与目标类对应的java.lang.Class对象实例，然后交给Java虚拟机进行链接、初始化等操作；
	类的加载分类
		显式加载
			在代码中通过调用ClassLoader加载class对象，如直接使用Class.forName(name)或this.getClass().getClassLoader().loaderClass()加载对象；
		隐式加载
			不直接在代码中调用ClassLoader的方法加载class对象，而是通过虚拟机自动加载到内存中，如加载某个类的class文件时，该类的class文件中引用了另外一个类的对象，此时额外引用的类将通过JVM自动加载到内存中；
	命名空间与类的唯一性
		类的唯一性
			对于任意一个类，都需要加载它的类加载器和这个类本身一同确认其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间：比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则及时这两个类来自同一个Class文件，被同一个虚拟机加载，只要他们的类加载器不同，那这两个类就必定不相等；
		命名空间
			每个类加载器都有自己的命名空间，命名空间由该加载器及所有的父类加载所加载的类组成；
			在同一命名空间中，不会出现类的完整名字（包括类的包名）相同的两个类；
			在不同的命名空间中，有可能会出现完整名字（包括类的包名）相同的两个类；
	类加载机制的基本特征
		双亲委派模型（不是所有类加载器都遵守这个模型）；
		可见性
			子类加载器可以访问父加载器加载的类型，所以
		单一性
			由于父加载器的类型对于子加载器是可见的，所以父加载器加载过的类型，就不会在子加载器中重复加载；
	类加载器
		启动类加载器（引导类加载器）
			这个类加载使用C/C++语言实现，嵌套在JVM内部；
			用来加载Java核心库（LAVA_HOME/jre/lib/rt.jar或sun.boot.class.path路劲下的内容），用于提供JVM自身需要的类；
			并不继承自java.lang.ClassLoader是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader，没有父加载器；
			启动类加载器只加载包名为java、javax、sun等开头的类；
			加载扩展类和应用程序类加载器，并指定为他们的父类加载器；
		扩展类加载器
			Java语言编写，由sun,misc.Launcher$ExtClassLoader实现；
			继承于ClassLoader类；
			父类加载器为启动类加载器；
			从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录下加载类库（用户创建的JAR放在此目录下，也会自动由扩展类加载器加载）；
		应用程序类加载器（系统类加载器）
			java语言编写，由sun.misc.Launcher$AppClassLoader实现；
			继承于ClassLoader类；
			父类加载器为扩展类加载器；
			负责加载环境变量classpath或系统属性java.class.path指定路径下的类库；
			应用程序中的类加载器默认是系统类加载器；
			系统类加载器是用户自定义类加载的默认父类；
			通过ClassLoader的getSysytemClassLoader()方法可以获取到该类加载器；
		用户自定义类加载器
			Java开发者可以自定义类加载器来实现类库的动态加载，加载源可以是本地的JAR报，也可以是网络上的远程资源；
			通过类加载器可以实现插件机制，类加载器为应用程序提供了一种动态增加新功能的机制，无需重新打包发布应用程序就能实现；
			自定义类加载器能够实现应用隔离；
			自定义类加载器通常需要继承于ClassLoader；
			自定义类加载器实现方式
				实现方式
					重写loadClass()方法；
					重写findClass()方法；
				对比
					本质上差不多，因为loadClass()方法也会调用findClass()，建议只是在findClass()方法里重写自定义类的加载方法
						loadClass()方法是实现双亲委派模型逻辑的地方，擅自修改会导致模型被破坏；
					
		注：数组类的Class对象，不是由类加载器去创建的，而是Java在运行期JVM根据需要自动创建的，对于数组类的类加载器来说，是通过Class.getClassLoader()返回的，与数组当中元素类型的类加载器是一样的；
			如果数组元素是基本数据类型，那么Class.getClassLoader()是无法获取到类加载器的，因为基本数据类型不需要类加载器加载；
	ClassLoader类源码
		getParent()：返回该类加载器的超类加载器；
		loadClass(String name)：加载名称为name的类，返回结果为java.lang.Class类的实例，如果找不到类，则返回ClassNotFoundException异常；
		findClass(String name)：ClassLoader类里该方法的方法体为空，在URLClassLoader类里重写，查找二进制名称为name的类，返回结果为java.lang.Class类的实例（在findClass()方法里要调用defineClass()方法生成类的Class对象）；
		defineClass(String name, byte[] b, int off, int len)：根据给定的字节数组b转换为Class的实例，off和len参数表示实际Class信息在byte数组中的位置和长度，其中byte数组b是ClassLoader从外部获取的，这是受保护的方法，只有在自定义的ClassLoader子类中可以使用；
		resolveClass(Class<?> c)：链接指定一个Java类，使用该方法可以实用类的Class对象创建完成的同时也被解析，
		Class.forName()与ClassLoader.loadClass()
			Class.forName()是一个静态方法，最常用的是Class.forName(String className),根据传入的类的全限定名返回一个Class对象，该方法在将Class文件加载到内存的同时，会执行类的初始化；
			ClassLoader.loadClass()是一个实例方法，需要一个ClassLoader对象来调用该方法，该方法将Class文件加载到内存，并不会执行类的初始化，知道这个类第一次使用时才进行初始化；
	双亲委派机制
		如果一个类加载器在街道加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，一次递归，如果父类加载器可以完成类加载任务，就成功返回。只有父类加载器无法完成此加载任务时，才会自己去加载；
		代码支持
			双亲委派机制在java.lang.ClassLoader.loadClass(String,boolean)接口中体现
				先在当前加载器的缓存中查找有无目标类，如果有直接返回；
				判断当前加载器的父加载器是否为空，如果不为空，则调用parent.loadClass(name, false)接口进行加载；
				反之，如果当前加载器的父类加载器为空，则调用finfBootstrapClassOrNull(name)接口，让引导类加载器进行加载；
				如果通过以上3条路经都没能成功加载，则调用findClass(name)接口进行加载，该接口最终会调用java.lang.ClassLoader接口的defineClass系列的native接口加载目标Java类；
		优势
			避免了类的重复加载，确保一个类是全局唯一性的；
			保护程序安全，防止核心API被篡改；
			注：如果在自定义的类加载器中重写java.lang.ClassLoader.loadClass(String)或java.lang.ClassLoader.loadClass(String,boolean)方法，抹去其双亲委派机制，也不能用自定义类加载器加载核心API，因为类加载器最终都会调用java.lang.ClassLoader.defineClass(String, byte[], int, int, ProtectionDomain)方法，而该方法会执行preDefineClass()接口，该接口中提供了对JDK核心类库的保护；
		劣势
			顶层的ClassLoader无法访问底层的ClassLoader所加载的类；
	破坏双亲委派机制
		jdk1.2以前版本的代码会破坏；
		线程上下文加载器
		用于对程序动态性的追求而导致，如代码热替换、模块热部署等；
	热替换的实现
		在程序的运行过程中，不停止服务，只通过替换程序文件来修改程序的行为；
		使用自定义的类加载器加载目标类即可实现热替换；
	沙箱安全机制
		将Java代码限定在虚拟机特定的运行范围中，并且沿着限制代码对本地系统资源的访问；
	自定义类加载器
		自定义加载器目的
			隔离加载类
				在某些框架内进行中间件与应用模块隔离，吧类加载到不同的环境；
			修改类加载方式
				类的加载模型并非强制，除Bootstrap外，其他的加载并非一定要引入，或者根据实际情况在某个时间点进行按需动态加载；
			扩展加载源
				从数据库、网络、甚至电视机机顶盒进行加载；
			防止源码泄露
				Java代码容易被变异和篡改，可以进行编译加密，那么类加载也需要自定义，还原加密的字节码；
		实现方式
			方式一：重写loadClass()
			方式二：重写findClass()（推荐）
						将.class文件读入到内存中（BufferedInputStream转换为ByteArrayOutputStream），并转换为字节数组（baos.toByteArray()），再调用defineClass方法加载.class文件；
			注：自定义加载器父类是系统类加载器；