1、Class文件结构
	Class类的本质
		任何一个Class文件都对应着唯一一个类或接口的定义信息，Class文件并不一定是以磁盘文件的形式存在，Class文件是一组以8位字节为基础单位的二进制流；
	Class文件格式
		Class文件格式存储数据只有两种数据类型
			无符号数
				无符号数属于基本的数据类型，可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值；
			表（类似于Java中的数组）
				由多个无符号数或者其他表作为数据项构成的符合数据类型
		Class文件结构
			魔数（cafebabe）
				识别当前文件为字节码文件；
			Class文件版本
				紧跟着魔数的4个字节存储的是Class文件的版本号，第5个和第6个字节所代表的就是编译的副版本号minor_version，第7和第8个字节就是编译的主版本号major_version；
				主版本号和副版本号共同组成class文件的格式版本号，主版本号.副版本号；
				主版本号和副版本号的组合代表着不同版本的编译器，不同版本的Java编译器的Class文件对应的版本是不一样的，高版本的Java虚拟机可以执行由低版本编译器生成的Class文件，但是低版本的Java虚拟机不能执行由高版本编译器生成的Class文件（会抛出java.lang.UnspportedVersionError）；
			常量池
				版本号之后紧跟着的就是常量池的数量，以及若干个常量池表项；
				常量池中常量的数量是不固定的，所以在常量池的入口需要防止一项u2类型的无符号数，代表常量池容量计数值（constant_pool_count），容量计数是从1开始；
				常量池中存放两大类常量
					字面量
						文本字符串或声明为final的常量值；
					符号引用
						类或接口的全限定名（包名+类型，把全类名中的.换成/）； 
						字段的名称和描述符（用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值）；
						方法的名称和描述符；
				常量池表中保存的是Java源文件中所有方法、属性和类的信息
					常量池表里的14种常量项第一位都是一个u1类型的标志位(tag)，代表当前这个常量项使用的是哪种表结构；
					CONSTANT_Utf8_info保存文本字符串、类或接口的全限定名、字段或者方法的简单名称以及描述符等常量字符串信息；
					CONSTANT_Utf8_info占用的字节大小不固定，其他的都是固定大小；
				动态链接补充
					虚拟机在加载Class文件时才会进行动态连接，当虚拟机运行时需要从常量池中获得对应的符号引用，再在类加载过程中的解析解读那将其替换为直接引用，并翻译到具体的内存地址中；
					符号引用和直接引用的区别与关联
						符号引用
							以一组符号来描述所引用的目标，符号可以时任何形式的字面量，只要能无歧义地定位到目标即可，符号引用与虚拟机实现的内存布局无关，引用的目标也不一定要加载到内存中；
						直接引用
							可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄，直接引用是与虚拟机实现的内存布局相关的，如果有了直接引用那说明引用的目标已经存在于内存之中了；						
			访问标志
				常量池后面紧跟的是访问标记，使用两个字节表示，用于识别一些类或接口层次的访问信息，包括这个Class是类还是接口，是否定义为public类型，是否定义为abstract类型，如果是类的话是否被声明为final等；
				访问标志中包含的值是累加起来的（访问标时表中的每一项都有对应的值）
				注：
					带有ACC_INTERFACE标志的class文件表示的是接口而不是类，不带则表示类
						如果有ACC_INTERFACE标时，同时也可以设置ACC_ABSTRACT标志，同时不能设置ACC_FINAL、ACC_SUPER或ACC_ENUM；
						如果没有ACC_INTERFACE标志，可以带有除ACC_ANNOTATION外的其他所有标志，ACC_FINAL和ACC_ABSTRACT不能同时使用；
					ACC_SYNTHETIC标志意味着该类或接口是由编译器生成的，而不是由源代码生成的（编译器在编译过程中生成的类，没有源码对应）；
			类索引，父类索引，接口索引集合
				访问标记后会指定该类的类别、父类类别以及实现的接口；
				类索引(this_class)
				父类索引(super_class)
				类实现的接口(是一张表包含interfaces_count接口计数器（2个字节）和interface[interface_count]接口索引集合，接口索引集合的索引范围和数组保持一致，从0开始)
			字段表集合
				用于描述接口或类中声明的变量，包括类级变量以及实例级变量，但是不包括方法内部、代码块内部声明的局部变量；
				它指向常量池索引集合，描述每个字段的完整信息；
				字段索引集合
					集合里的每个字段都有以下几个部分（每个部分为2个字节）
						字段访问标识（对应访问标识表）；
						字段名索引（对应常量池中的索引）；
						描述符索引（对应常量池中的索引）；
						字段的属性计数器（2个字节）；
						字段的属性表集合里每个属性的内容
							属性名称索引，记录属性的名称；
							属性长度；
							属性值索引，记录属性的值；
				注：
					字段表中不会列出从父类或者实现的接口中继承而来的字段；
					在字节码中如果两个字段的描述符不一致，那字段重名就是合法的；
			方法表集合
				指向常量池索引集合，完整描述了每个方法的签名；
				字节码文件中，每一个method_info项都对应一个类或者接口中的方法信息，方法的访问修饰符、返回值类型以及方法的参数信息；
				如果这个方法不是抽象的或是不是native的，会在字节码文件中体现出来；
				方法表只描述当前类或接口中的声明的方法，不包括父类中的方法，且方法表中有可能出现由编译器自动添加的方法（类（接口）初始化方法<clinit>()和初始化实例方法<init>()）；
				方法表集合结构
					方法计数器
						2个字节，用来记录方法表中的方法数量，每个方法又是表结构；
					方法的完整描述
						方法访问标志（对应访问标志表）；
						方法名索引（对应常量池中的索引）；
						描述符索引（对应常量池中的索引）；
						属性计数器（2个字节）；
						属性集合（方法自带的属性，Code属性等）；
				注：
					Java语言层面特征签名（方法名+参数类型+参数顺序）就是一个方法中各个参数在常量池中的字段符号引用集合（不包括返回值）Class文件格式中特征签名（方法名+参数类型+参数顺序+返回值类型）的范围更大，只要描述符不是完全一致的两个方法就可以共存；
			属性表集合
				class文件所携带的辅助信息，比如该class文件的源文件的名称，以及任何带有RetentionPolicy.CLASS或RetentionPolicy.RUNTIME的注解，这类信息通常被用于Java虚拟机的验证和运行，以及Java程序的调试，一般无需深入了解；
				字段表和方法表中都可以有自己的属性表，用于某些场景专有的信息；
				属性的通用格式
					属性名索引（对应常量池中的索引）；
					属性长度（不同的属性名，其属性长度都是不一样的）；
					属性表（不同的属性名有不同的属性表）；
				字节码文件的最后一部分就是附加属性集合，其结构和属性集合类似；