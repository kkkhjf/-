一、数据结构
	线性和非线性
		线性结构
			数据元素之间存在一对一的关系，线性结构有两种存储结构（链式和顺序）；
			顺序存储的地址是连续的，链式存储的地址不一定是连续的；
			线性结构包括数组，队列，链表和栈；
		非线性结构
			数据元素之间不是一对一的关系；
			非线性结构包括二维数组，多维数组，广义表，树结构，图结构；
二、队列和链表
	1、稀疏数组和队列
		稀疏数组
			记录数组一共有几行几列，有多少个不同的值（一般实多行三列，第一行记录行列数和数组中的有多少数值 ）；
			把具有不同的元素的行列及值记录在一个小规模数组中，从而压缩原数组的规模；
		队列
			可以用数组或链表来实现；
			遵循先入先出的原则；
				思路分析
				入队列时front指针移动，出队列时rear指针移动;
				当front==rear时队列为空，当rear==maxsize-1时队列为满；
				rear时队列最后（包含），front是队列最前（不含）；
		循环队列
			front指向队列的第一个元素，rear指针指向队列的最后一个元素的后一个位置；
			队列满时：（rear + 1）% maxSize = front；
			队列空时：rear == front；
			注：循环队列最多只有maxSize-1个值；
				循环队列中元素的个数：(rear + maxSize - front)%maxSize；
	2、单链表
		链表是以街店的方式来存储；
		每个节点包含data域，next域（指向下一个节点）；
		链表分带头结点和不带头结点；
		注：链表的各个节点不一定是连续存储；
			头节点不存放具体的数据，用来表示单链表的开始；
		单链表节点结构
			class HeroNode{
				private int no;
				private String name;
				private String nickName;
				private HeroNode next; //指向下一个节点

				//节点构造器
				public HeroNode(int no, String name, String nickName){
					this.no = no;
					this.name = name;
					this.nickName = nickName;
				}

				@Override
				public String toString(){
					return "HeroNode[ no = " + this.no + ", name = " +  this.name +
							", nickName = " + this.nickName + " ]";
				}
			}
		单链表的添加操作
			创建一个head头节点，作用就是表示单链表的头；
			后续每添加一个节点，就直接加入到链表的最后；
	3、双链表
		单链表的缺点
			查找方向只能是一个方向；
			单链表不能实现自我删除，必须借助一个辅助节点；
		双链表的添加
			找到双链表的最后一个节点；
			temp.next = newHeroNode;
			newHeroNode.pre = temp;
		双链表的删除
			找到想要删除的节点；
			temp.pre.next = temp.next;
			temp.next.pre = temp.pre;
	4、单向环形链表
		所有结点形成一个闭环的结构；
		构建单向环形链表
			先创建第一个结点，让first指向该节点，并形成环形；
			后面每创建一个新的结点，就把该节点加入到已有的环形链表中即可；
		遍历环形链表
			让一个辅助指针指向first结点；
			再逐个遍历；
			