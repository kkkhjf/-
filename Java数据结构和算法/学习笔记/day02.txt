二、线性结构
	4、单向环形链表
		所有结点形成一个闭环的结构；
		构建单向环形链表
			先创建第一个结点，让first指向该节点，并形成环形；
			后面每创建一个新的结点，就把该节点加入到已有的环形链表中即可；
				当前结点指向新创建的结点；
				新创建的结点再指向first结点形成闭合；
				最后将当前结点指针指向新创建的结点；
		遍历环形链表
			让一个辅助指针指向first结点；
			再逐个遍历；
	5、栈
		栈是一个先入后出的有序列表；
		栈是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表，允许插入和删除的一端称为栈顶，另一端称为栈底；
		栈的应用
			处理递归调用；
			表达式的转换[中缀和后缀表达式]与求值；
			二叉树的遍历；
			图形的深度优化搜索；
		计算器的设计思路（表达式不带括号）
			首先遍历表达式，发现数字就直接入数栈；
			发现的是符号
				如果符号栈为空，直接入符号栈；
				如果不为空则比较当前操作符和栈中操作符的优先级
					当前优先级小于或等于栈中，则从数栈中pop两个数字和符号栈中pop出的符号进行运算，运算结果入数栈，当前操作符入符号栈；
					当前优先级大于栈中，则直接入符号栈；
			表达式扫描完后从数栈和符号栈中pop出相应的数字进行运算；
			最后的结果保存在数栈中；
		前缀表达式（波兰表达式）
			运算符都位于操作数之前；
			从右到左扫描，遇到数字时将数字压入堆栈，遇到运算符时弹出栈顶的两个数，用运算符对他们做出相应的计算，并将结果入栈
				重复上述过程知道表达式最左端为止；
		中缀表达式
			运算时往往将中缀表达式转换成后缀表达式
				初始化两个栈，运算符栈s1和存储中间结果的栈s2；
				从左只有扫瞄中缀表达式；
				遇到数字时将其压入s2；
				遇到运算符时比较其与s1栈顶运算符的优先级
					如果s1为空，或栈顶元素为'('，则直接入栈；
					当前优先级比栈中优先级高，则直接入栈；
					当前优先级小于或等于栈中优先级，则弹出栈顶元素进入s2中，再次与s1栈顶元素比较；
				遇到括号时
					如果是左括号'('，则直接入s1栈；
					如果是右括号')'，则一次弹出s1栈的运算符，并压入s2中，直到遇到左括号为止，并将这一对括号丢弃；
				重复上述操作，直到表达式的最右端；
				将s1中剩余的运算符依次弹出并压入s2；
				依次弹出s2中的元素，结果的逆序即为中缀表达式的后缀表达式；
		后缀表达式（逆波兰表达式）
			从左至右扫描表达式，遇到数字时将数字压入堆栈，遇到运算符时，弹出栈顶的两个数用运算符对他们做出相应的计算，并将结果入栈
				重复上述操作，直到表达式的最右端；
		