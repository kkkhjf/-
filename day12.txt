1、内部类
      Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类；
      内部类的分类：
          成员内部类（静态和非静态）和局部内部类（方法内、代码块内、构造器内）；
      成员内部类：
          作为外部类的成员（可以调用外部类的结构，可以被static、四种权限修饰符修饰）
          作为一个类（类内可以定义属性、方法、构造器等，可以继承，可以用final、abstract修饰）
          静态内部类实例化：外部类.内部类 对象名 = new 外部类.内部类（）；
          非静态内部类实例化：先声明外部类的对象，再用类似于上面的方法实例化内部类对象（外部类.内部类 对象名 = 外部类对象.new 内部类（））。
      局部内部类：
          局部内部类不能被public、protected、private以及static修饰；
          在局部内部类的方法中，如果调用局部内部类所声明的方法中的局部变量，要求局部变量声明为final。
      成员内部类和局部内部类编译后后都会生成字节码文件。
      成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员），外部类访问成员内部类只能先创建内部类对象再访问内部类成员；
      当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。如果要访问外部类的同名成员格式：外部类.this.成员；
      
      注❗：创建静态内部类对象的一般形式为：  外部类类名.内部类类名 xxx = new 外部类类名.内部类类名();
　　       创建成员内部类对象的一般形式为：  外部类类名.内部类类名 xxx = 外部类对象名.new 内部类类名().

2、抽象类和接口的异同点：
		  相同：不能实例化，都可以包含抽象方法；
		  不同点：详见抽象类和接口的定义、内部结构，类单继承接口多继承 ；
		  
3、内部类
    Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类；
    内部类的分类：
        成员内部类（静态和非静态）和局部内部类（方法内、代码块内、构造器内）；
    成员内部类：
        作为外部类的成员（可以调用外部类的结构，可以被static、四种权限修饰符修饰）
        作为一个类（类内可以定义属性、方法、构造器等，可以继承，可以用final、abstract修饰）

4、面向对象小结：
    四种权限修饰符:
        public,protected,private,缺省(default):
            其中类只能被public和default修饰,类成员则可以被所有权限修饰符修饰;
            protected可以被本类,同包下的子类非子类访问和不同包的子类访问;
            default只能被同包和本类访问;
    匿名类:
        匿名类的定义:
            匿名类的声明是由java编译器自动派生自一个类实例创建表达式。
            匿名类永远不能是抽象的。
            匿名类总是隐式的final。
            匿名类总是一个内部类；并且不能是static的。
        匿名类注意事项:
            使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。
            匿名内部类中是不能定义构造函数的。
            匿名内部类中不能存在任何的静态成员变量和静态方法。
            匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。
            匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。
