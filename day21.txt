1、Map接口
    Map：双列数据，存储key-value对（键值对）的数据（类似于高中的函数：y = f(x)）
            HashMap：作为Map的主要实现类；线程不安全，效率高；可以存储null的key和value；
                    LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实现遍历
                             原因：在原有的HashMap底层结构基础上，添加了一个指针，指向前一个和后一个元素；
                             对于频繁的遍历操作，此类执行效率高于HashMap。
            TreeMap：保证按照添加的key-value对此进行排序，实现排序遍历；此时考虑key的自然排序或定制排序
            Hashtable：作为古老的实现类；线程安全，效率低；不能存储null的key和value；
                    Properties：常用来处理配置文件。key和value都是String类型。
    HashMap的底层：数组+链表（jdk7及以前）
                  数组+链表+红黑树（jdk 8）  
                  
2、Map结构的理解
    Map中的key：无序的、不可重复的，使用set存储所有的key --->key所在的类要重写equals()和hashCode()方法；【以HashMap为例】
    Map中的value：无序的、可重复的，使用Collection存储所有的value --->value所在的类要重写equals()方法；
    一个键值对：key-value构成一个Entry对象；
    Map中的Entry：无序的、不可重复的，使用set存储所有的Entry；
    
3、HashMap的底层实现原理？（jdk7为例）
    HashMap map = new HashMap();
    在实例化后，底层创建了长度是16的一维数组Entry[] table；
    ...可能已经执行过多次put...
    map.put(key1，value1):
    首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置；
        如果此位置上的数据为空，此时key1-value1添加成功---（情况1）；
        如果此位置上的数据不为空，（意味着此位置上存在一个或多个数据（以链表形式存在）），比较key1和已经存在的多个数据的hash值
            如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功；---（情况2）
            如果key1的哈希值和已经存在的某一个数据（key2-value2）的哈希值相同，继续比较：调用key1所在类的equals()方法
                                                               如果equals()返回false，此时key1-value1添加成功；---（情况3）
                                                               如果equals()返回true，使用value1替换value2；
    补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。
    
    在不断的添加过程中，会涉及到扩容问题，当超出临界值（且要存放的位置非空）时，默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。
    jdk8相对于jdk7在底层实现方面的不同：
        new HashMap()：底层没有创建一个长度为16的数组；
        jdk8底层的数组是Node[]，而非Entry[]；
        首次调用put()方法时底层创建长度为16的数组；
        jdk7底层结构（数组+链表）jdk8中底层结构（数组+链表+红黑树）；
            当数组中某一个索引位置上的元素以链表形式存在的数据个数 > 8且当前数组的长度 > 64时，此时此索引位置上的所有数据采用红黑树存储。                                                                                                                
