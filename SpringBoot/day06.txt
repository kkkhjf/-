1、定制化原理
	定制化的常见方式
		修改配置文件；
		实现xxxxxxCustomizer接口；
		编写自定义的配置类xxxConfiguration，在类里面使用@Bean注解替换、增加容器中的默认组件或视图解析器；
		web应用实现WebMvcConfigurer即可定制化web功能，写一个配置类实现WebMvcConfigurer接口，修改SpringBoot底层的一些配置（如果在配置类@Configuration注解上
			再加上@EnableWebMvc注解即代表全面接管，那么所有的规则都需要重新手动设置（静态资源访问、视图解析器等））；
2、数据访问
	数据源的自动配置
		导入JDBC场景
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-jdbc</artifactId>
			</dependency>
		导入数据库驱动
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
			</dependency>
			不需要写上数据库驱动的版本号，在spring-boot-starter里已经设定好了，但是不写版本号要注意与自己的数据库版本是否一致；
		自动配置
			DataSourceAutoConfiguration：数据源的自动配置
				修改数据源相关的配置只需要根据spring.datasource在配置文件中修改；
				数据库连接池的配置，是自己容器中没有DataSource才自动配置；
				底层配置好的连接池是HikariDataSource；
			DataSourceTransactionManagerAutoConfiguration：事务管理器的自动配置
			JdbcTemplateAutoConfiguration：jdbcTemplate的自动配置，可以来对数据库进行crud
				可以通过spring.jdbc在配置文件中修改jdbc的相关属性；
	使用Druid数据源
		整合第三方技术的两种方式
			自定义
				引入第三方技术的依赖；
				自定义一个配置类
					在配置类中加入一个DataSource的Bean，这个Bean的返回类型是DataSource，返回的是引入的第三方数据源的DataSource；
					SpringBoot自带的数据源是在当前容器中没有其他数据源的情况下才会自动配置； 
					也可以将Bean中数据源的一些属性设置与配置文件绑定，加上@ConfigurationProperties("spring.datasource")；
					配置数据源监控页
						Druid为例
							使用Druid的监控页
								需要配置StatViewServlet（使用ServletRegistrationBean）；
								servlet的访问路径是"/druid/**"；
							使用监控统计
								需要将filter属性设置为"stat"；
							监控Web数据
								需要配置WebStatFilter；
								拦截的路径是"/*"；
								排除一些静态资源的访问路径FilterRegistrationBean.addInitParameter("exclusions", "*.js,*.gif,*.png,*jpg,*.css,.ico,/druid/*")；
				 			开启防火墙
								需要将filter属性设置为"wall"，多个参数使用逗号分隔；
							开启登录数据源监控页用户限制
								在配置的Serlvet中添加初始化参数；
								使用ServletRegistrationBean.addInitParameter("loginUserName", "admin");ServletRegistrationBean.addInitParameter("loginPassword", "123456")；
							其他具体参考官方文档；
			找starter
				导入依赖，不需要再引入第三方数据源的依赖（如druid）
					<dependency>
						<groupId>com.alibaba</groupId>
						<artifactId>druid-spring-boot-starter</artifactId>
						<version>1.1.17</version>
					</dependency>
				所有的属性与配置文件绑定
					扩展配置项：spring.datasource.druid；
					监控SpringBean的配置项：spring.datasource.druid.aop-patterns；
					监控页的配置：spring.datasource.druid.stat-view-servlet，默认开启；
					web监控配置：spring.datasource.druid.web-stat-filter，默认开启；
					所有Druid自己filter的配置
						spring.datasource.druid.filter.stat/config/encoding/slf4j/log4j/log4j2/commons-log/wall；
	整合MyBatis操作
		引入依赖
			<dependency>
				<groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot-starter</artifactId>
				<version>最新版本</version>
			</dependency>
		配置模式
			MybatisAutoConfiguration类，MybatisProperties配置项绑定mybatis属性；
			SqlSessionFactory：SpringBoot自动配置好了；
			SqlSession：自动配置了SqlSessionTemplate，SqlSessionTemplate里面配置了SqlSession；
			Mapper：只要我们写的操作MyBatis的接口标注了@Mapper注解，就会被自动扫描进来； 
			纯配置模式
				在springboot中指定mybatis的全局配置文件和映射文件的位置；
				再通过接口指定对应的查询方法（接口上要标注@Mapper接口），在映射文件中实现该方法；
				注：如果在springboot配置文件中配置了mybatis.configuration属性，则不需要再添加mybatis的全局配置文件；
			纯注解配置
				不需要在springboot中指定mybatis的全局配置文件和映射文件；
				在接口上标注@Mapper注解，再在里面的方法上标注@Select等注解，在注解里直接写sql语句即可；
				在方法上使用@Options注解可以给该语句设置一些属性参数，useGeneratedKeys、keyProperty等；
			混合配置
				当某些查询语句很麻烦时，还是需要通过mapper配置文件来具体实现该sql语句；
			注：可以在springbppt的主类上加上@MapperScan注解，用来扫描一个指定范围下的所有Mapper接口，不需要一个个的加上@Mapper注解；
		mybatis-plus
			引入依赖（引入mubatis-plus依赖就不需要再引入mybatis的依赖了）
				<dependency>
					<groupId>com.baomidou</groupId>
					<artifactId>mybatis-plus-boot-starter</artifactId>
					<version>最新版本</version>
				</dependency>
			自动配置
				MybatisPlusAutoConfiguration类，MybatisPlusProperties配置项绑定配置文件的mybatis-plus属性；
				SqlSessionFactory自动配置好了，底层是默认数据源；
				mapperLocations自动配置好了，默认值：classpath*:/mapper/**/*.xml，任意包的类路径下的所有mapper文件夹下任意路径的所有xml都是sql映射文件；
				SqlSessionTemplate自动配置好了；
				@Mapper标注的接口也会被自动扫描，建议直接写@MapperScan注解；
				使用mybatis-plus优点：
					只要继承BaseMapper<?>接口就可以直接使用crud方法，不需要自己手动添加；
					注：如果BaseMapper的泛型和表名不一致，则需要在该类型上加上@TableName(表名)注解，来告诉BaseMapper接口和操作哪一张表；
						Service接口继承另一个接口IService<?>，泛型代表具体是对哪一个类进行操作；
						Service实现类继承ServiceImpl类<?, ?>即可调用提前写好的sql方法，第一个泛型是继承BaseMapper接口接口，第二个泛型代表返回数据的类型；
			分页
				mybatis-plus里也封装了分页插件；
	整合Redis
		引入依赖
			<dependency>
				<groupId>org.sprinframework.boot</groupId>
				<artifactId>spring-boot-starter-data-redis</artifactId>
			</dependency>
		自动配置
			RedisAutoConfiguration：Redis自动配置类，RedisProperties属性类将配置文件与spring.redis绑定；
			连接工厂是准备好的，LettuceConnectionConfiguration、JedisConnectionConfiguration两种连接工厂；
			自动注入了RedisTemplate（k，v都是Object类型）和StringRedisTemplate（k，v都是String类型）；
		Redis环境搭建
			使用阿里云Redis；
			申请公网地址；
			设置白名单地址，0:0:0:0/0，表示所有ip都可以访问；
		配置Redis
			配置url：redis://user:password@example.com:端口号；
			另一种配置url的方式
			redis:
				host: 访问地址
				port: 端口号
				password: 账号:密码
			其他配置可选，配置url是最基本的配置；