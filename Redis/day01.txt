1、NoSQL数据库
    特点
        不依赖业务逻辑方式存储，而以简单的key-value模式存储，大大增加了数据库得扩展能力；
        不遵循SQL标准，不支持ACID，远超于SQL的性能；
    适用场景
        对数据高并发的读写；
        海量数据的读写；
        对数据高可扩展性；
    不适用场景
        需要事务支持；
        基于sql的结构化查询存储，处理复杂的关系；
        用不着sql的和用了sql也不行的情况，请考虑用NoSql；
    Redis功能
        数据都在内存中，支持持久化，主要用作备份恢复；
        除了支持简单的key-value模式，还支持多种数据结构的存储（list、set、hash、zset等）；
        一般作为缓存数据库辅助持久化的数据库；
2、Redis安装
    Linux下安装Redis，先使用make编译redis，再使用make install安装redis（安装前要提前搭好gcc编译环境）；
    前台启动
        redis-serer
    后台启动
        首先将redis-conf文件复制到etc目录下；
        修改redis.conf文件，将daemonize no改成demonize yes；
        进入/usr/local/bin目录，使用redis-server /etc/redis.conf命令后台启动Redis；
        使用redis-cli shutdown命令进行单例关闭，使用redis-cli进入终端后再使用shutdown命令关闭；
        多实例关闭，指定端口号redis-cli -p 6379 shutdown
3、Redis相关
    redis默认16个数据库，类似数组下标从0开始，初始默认使用0号库；
    进入redis终端使用select 索引号 命令切换数据库，如 select 3；
    所有的库密码都是一样的；
    dbsize：命令查看当前数据库的key的数量；
    flushdb：清空当前库；
    flushall：杀死全部库；
4、key键操作
    keys *：查看当前库所有key（匹配keys *1）；
    exists key：判断某个key是否存在；
    type key：查看你的key是什么类型；
    del key：删除指定的key数据；
    unlink key：根据value选择非阻塞删除（仅将keys从keysapce元数据中删除，真正的删除会在后续异步操作）；
    expire key 10：为给定的key设置过期时间，单位为秒；
    ttl key：查看还有多少秒过期，-1表示永不过期，-2表示已过期；
    redis字符串
        String是redis最基本的数据类型，一个key对应一个value（value最多可以保存512M的数据）；
        String类型是二进制安全的，redis的string可以包含任何数据，如图片或者序列化的对象；
        常用命令
            set key value：向数据库中添加数据；
            get key：获取对应的value值；
            append key value：将给定的value追加到原值的末尾；
            strlen key：获得值的长度；
            setnx key value：只有在key不存在时，设置key的值；
            incr key value：将key中存储的数字值增加value，默认为1；
            decr key value：将key中存储的数字值减少value，默认为1；
            mset key1 value1 key2 value2 key3 value3...：同时设置多个key-value对；
            mget key1 key2 key3...：同时获取一个或多个value；
            msetnx key1 value1 key2 value2 key3 value3...：同时设置一个或多个key-value对，当且仅当所有给定key不存在（任何一个失败都失败）；
            getrange key sindex eindex：获取值的范围，类似与Java中的substring，前包后包；
            setrange key sindex value：用value覆写key所存储的字符串值，从sindex索引开始；
            setex key 过期时间 value：给key设置过期时间；
            getset key value：获取旧值，并将value设置为新值；
            注：使用incr和decr时不会被线程调度机制打断（原子操作）一旦开始原子操作，中间不会有任何切换线程的操作；
        数据结构
            简单动态字符串，是可以修改的字符串，内部结构类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配；
            内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len，当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容一次智慧多扩1M，最长为512M；
    List
        redis列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素道列表的表头和表尾，底层实际上是一个双向列表；
        常用命令
            lpush/rpush key value1 value2v alue3...：从左边/右边插入一个或多个值；
            lpop/rpop key：从左边/右边吐出值，值在键在，值光键亡；
            rpoplpush key1 key2：从key1列表右边吐出一个值，插到key2列表左边；
            lrange key sindex eindex：按照索引下标获得元素（从左到右，0表示左边第一个，-1表示右边第一个）；
            lindex key index：获取指定key的索引下标的元素；
            llen key：获取列表长度；
            linsert key before/after value newvalue：在value的前面/后面插入newvalue；
            lrem key n value：从左边删除n个value（从左到右）；
            lset key index value：将列表key下标为index的值替换成value；
        数据结构
            List列表数据结构为快速列表quickList；
            首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，当数据量变多时才会改成quickList（多个ziplist结合起来形成quickList，
                将多个ziplist使用双向指针串起来使用）；
    Set
        redis的set是String类型的无序集合，底层是一个value为null的hash表，所以添加、查找、删除复杂度都是O(1)；
        常用命令
            sadd key value1 value2 value3...：将一个或多个value加入到key中，已经存在的value将被忽略；
            smembers key：取出该集合的所有值；
            sismember key value：判断集合key是否含有该value值，有1，无0；
            scard key：返回集合中元素的个数；
            srem key value1 value2...：删除集合中某个元素；
            spop key：随机从该集合中取出一个值，值在键在；
            srandmember key n：随机从该集合中取出n个值，不会从集合中删除；
            smove key1 key2 value：把value从key1集合移动到key2集合；
            sinter key1 key2：返回两个集合的交集；
            sunion key1 key2：返回两个集合的并集元素；
            sdiff key1 key2：返回两个集合的差集元素（key1中有，key2中没有）
        数据结构
            Set数据结构是字典，字典使用哈希表实现的；
            redis的set结内部使用hash结构，所有value都指向同一个内部值；
    Hash
        Redis hash是一个键值对集合，是一个string类型的field和value的映射表，hash特别适用于存储对象，类似于Java中的Mao结构；
        常用命令
            hset key field value：给key集合中的field键赋值value；
            hget key field：从key集合field取出value；
            hmset key field1 value1 field2 value2...：批量设置hash值；
            hexists key field：查看哈希表key中，给定域field是否存在；
            hkeys key：列出hash集合中所有的field；
            hvals key：列出hash集合中所有的value；
            hincrby key field increment：为哈希表key中域field的值加上增量increment；
            hsetnx key field value：将哈希表key中域field的值设置为value，当且仅当域field不存在；
        数据结构
            Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表），当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable；
    Zset
        zset与普通集合set非常相似，灭有重复的字符串集合，不同之处是有序集合的每个成员都关联一个评分，这个评分被用来按照从最低分到最高分的方式排列集合中的成员；
        集合的成员是唯一的，但是评分是可以重复的；
        常用命令
            zadd key score1 value1 score2 value2...：将一个或多个元素及其score加入到有序集key中；
            zrange key sindex eindex [withscores]：返回有序集key中，下标在sindex和eindex之间的元素，withscores，可以让分数一起和值返回到结果集；
            zrangebyscore key min max [withscores]：返回有序集key中，所有score值介于民和max之间的成员；
            zrevrangebyscore key max min [withscores]：同上改为从大到小排列；
            zincrby key increment value：为元素的score加上增量increment；
            zrem key value：删除该集合下，指定的元素；
            zcount key min max：统计该集合，分数取键内的元素个数；
            zrank key value：返回值在集合中的排名，从0开始；
        数据结构
            zset底层使用了两个数据结构
                hash，hash的作用是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值；
                跳跃表，跳跃表的目的是在于给元素value排序，根据score的范围获取元素列表;