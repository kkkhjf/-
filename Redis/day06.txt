1、集群
    redis集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储哦那个数据的1/N，
        redis集群通过分区来提供一定程度的可用性，即使集群中一部分节点失效或者无法通讯，集群也可以继续处理命令请求；
    集群的创建
        将rdb和aop文件都删掉；
        制作6个实例，6379，6380，6381，6389，6390，6391；
        修改配置文件
            include /myredis/redis.conf
            pidfile "/var/run/redis_6391.pid"
            port 6391
            dbfilename "dump6391.rdb"
            cluster-enabled yes
            cluster-config-file nodes-6391.conf
            cluster-node-timeout 15000
        启动配置好的6个redis服务；
        将6个节点节点合成一个集群
            进入redis的src目录使用redis-cli --cluster create --cluster-replicas 1 192.168.45.3:6379 192.168.45.3:6380 192.168.45.3:6381
                192.168.45.3:6389 192.168.45.3:6390 192.168.45.3:6391命令实现redis的集群；
            连接集群，使用redis-cli -c -p 6379命令进入集群，-c表示采用集群策略连接，设置数据会自动切换到相应的写主机；
            查看集群信息，使用cluster-nodes命令；
    redis集群分布原则
        尽量保证每个主数据库运行在不同的ip地址，每个从库和主库不在同一个ip地址上；
    slots
        一个redis集群包含16384个插槽（hash slot），数据库的每个键都属于这16384个插槽的其中一个，集群使用公式CRC16(key)%16384来计算key属于哪个插槽，
            其中CRC16(key)语句用于计算键key的CRC16校验和；
        集群中每个节点负责处理一部分插槽；
    集群的操作
        连接任意一台主服务器都可以进入集群，当插入的key通过CRC16(key)计算得到的插槽值属于那一台主机，就会将端口改为该主服务器的端口；
        如果想向集合里一次插入多条key-value，则需要在每个key后面加上组名，集群按照组名计算插槽值，mset name{user} lucy age{user} 20；
        常用命令
            cluster keyslot 键名：获取该key的插槽值；
            cluster countkeysinsolt 插槽值：获取该插槽中的key数量，只能在该主机的插槽值范围内进行统计；
            cluster getkeysinslot 插槽值：获取插槽值中的key名称；
    故障恢复
        如果主机宕机，从机会自动成为主机，如果主机恢复其角色就会变成新主机的从机；
        如果某一段插槽中的主从机都宕机，而cluster-require-full-coverage位yes，则整个集群都会宕机，如果为no，则只是该段插槽不能使用，其他插槽不影响；
    集群的Jedis开发
        //创建对象
        HostAndPort hostAndPort = new HostAndPort("192.168.45.3", 6380);
        JedisCluster jedisCluster = new JedisCluster(hostAndPort);
        //进行操作，向集群中插入key-value，取出value
        jedisCluster.set("key", "value");
        String key = jedisCluster.get("key");
    集群的优缺点
        优点
            实现扩容、分摊压力、无中心配置相对简单；
        缺点
            多键操作不被支持，多键的redis事务不支持，也不支持lua脚本；
2、Redis应用问题解决
    缓存穿透
        key对应的胡数据在数据源并不存在，每次针对此key的i请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源（缓存中查不到数据，一直在访问数据库）；
        解决方案
            对空值缓存
                如果一个查询返回的数据为空（不管数据是否不存在），仍然把这个空结果进行缓存，设置空结果的过期时间会很短，最长不超过5分钟；
            设置可访问名单（白名单）
                使用bitmaps类型定义一个可访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps李米娜，进行拦截，不允许访问；
            采用布隆过滤器
                布隆过滤器实际上是一个很长的二进制向量和一系列随即映射函数（哈希函数）；
            进行实时监控
                当发现redus的命中率开始激素降低，需要排查访问对象和访问的数据，设置黑名单限制服务；
    缓存击穿
        key对印的数据存在，但是在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能回把DB压垮；
        解决方案
            预先设置热门数据
                在redis高峰访问之前，把一些热门数据提前存入到redis里面，加载这些热门数据key的时长；
            实时调整
                现场监控那些数据热门，实时调整key的过期时长；
            使用锁
                就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db；
                先使用缓存工具的某些带成功操作返回值的操作（比如redis的setnx）去set一个mutex key；
                当操作返回成功时，再进行load db操作，并会社缓存，子厚删除mutex key；
                当操作失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法；
    缓存雪崩
        key对应的数据存在，但是再redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能回把DB压垮；
        缓存雪崩和缓存击穿的区别在于这里整堆很多key缓存，前者试大量key过期，后者是某一个key过期；
        解决方案
            构建多级缓存架构
                nginx缓存+redis缓存+其他缓存等；
            使用锁或者队列
                用加锁或者队列的方式保证不会有大量的县城对数据库一次性进行独写，从而避免失效时大量的并发请求落到底层存储系统上，不使用高并发情况；
            设置过期标志更新缓存
                记录缓存数据是否过期（设置提前量，如果过期回触发通知另外的线程在后台去更新实际key的缓存）；
            将缓存失效时间分散开
    分布式锁
        由于分布式系统多线程、多进程并且分布再不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力；
        分布式锁主流实现方案
            基于数据库实现分布式锁；
            基于缓存；
            基于Zookeeper；
        解决方案
            使用redis命令setnx设置锁，当setnx设置一个key后，只有删除（del命令）这个key才能重新对这个key进行赋值；
            使用setnx后再使用expire 键 时长 命令给这个key设置过期时间；
            上锁之后突然出现异常无法设置过期时间
                set key value nx ex timeout：nx表示上锁，ex表示设置过期时间；
        Java实现
            @GetMapping("testLock")
            public void testLock(){
                    //获取锁，setne
                    Boolean lock = redisTemplate.opsForValue().setIfAbsent("lock", "111", 3, TimeUnit.SECONDS);
                    //成功获取锁，查询num的值
                    if(lock){
                        Object value = redisTemplate.opsForValue().get("num");
                        //判断num为空返回null
                        if(StringUtils.isEmpty(value)){
                            return;
                        }
                        //有值就转换成int
                        int num = Integer.parseInt(value + "");
                        //把redis的num加1
                        redisTemplate.opsForValue().set("num", ++num);
                        //释放锁del
                        redisTemplate.delete("lock");
                    }else{
                        //获取锁失败、每隔0.1秒再获取
                        try {
                            Thread.sleep(100);
                            testLock();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            使用UUID防止误删锁
                使用UUID表示不同的操作；
                释放锁的时候，首先判断当前UUID和要释放锁UUID是否一样；
                 @GetMapping("testLoack")
                    public void testLock(){
                        //生成UUID
                        String uuid = java.util.UUID.randomUUID().toString();
                        //获取锁，setne，设置过期时间
                        Boolean lock = redisTemplate.opsForValue().setIfAbsent("lock", uuid, 3, TimeUnit.SECONDS);
                        //成功获取锁，查询num的值
                        if(lock){
                            Object value = redisTemplate.opsForValue().get("num");
                            //判断num为空返回null
                            if(StringUtils.isEmpty(value)){
                                return;
                            }
                            //有值就转换成int
                            int num = Integer.parseInt(value + "");
                            //把redis的num加1
                            redisTemplate.opsForValue().set("num", ++num);
                            //释放锁del
                            //判断uuid是否一样
                            String lockUUID = (String) redisTemplate.opsForValue().get("lock");
                            if(lockUUID.equals(uuid)){
                                redisTemplate.delete("lock");
                            }
                        }else{
                            //获取锁失败、每隔0.1秒再获取
                            try {
                                Thread.sleep(100);
                                testLock();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }
            del缺乏原子性(一个进程在执行del操作前锁已经过期了，另一个进程获得锁后，可能会被旧进程释放锁)
                使用LUA脚本实现原子性操作；
        确保分布式锁可用，需要同时满足下面四个条件
            互斥性
                在任意时刻，只有一个客户端能持有锁；
            不会发生死锁
                即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁；
            解铃还需系铃人
                加锁和解锁必须是同一个客户端，客户端不能把别人的锁给解了；
            几所和解锁必须具有原子性；