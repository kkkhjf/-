1、多线程
    程序、进程和线程
        程序：为了完成特定的任务、用某种语言编写的一组指令，是一段静态代码；
        进程：正在执行的程序，是一个动态的过程；
        线程：进程可以进一步细化为线程，一个程序内部的执行路径。一个进程同一时间并行执行多个线程，就是支持多线程的；
              每个线程拥有多个独立的运行栈和程序计数器；一个进程的多个线程共享相同的内存单元，他们从同意堆中分配对象，可以
              访问相同的变量和对象。
2、并行与并发
    并行：多个CPU同时执行多个任务；
    并发：一个CPU（采用时间片）同时执行多个任务。
    
3、多线程的创建和使用（方式一）
    通过使用java.lang.Thread类来创建线程：
            创建一个Thread类的子类；
            重写Thread类的run（）方法--->将此线程执行的操作声明在run（）方法中；
            通过此对象调用start（）【启动当前线程；调用当前线程中的run（）】；
            简易写法（利用匿名类实现创建多个线程）
                    new Thread(){
                        public void run(){
                            //重写run（）方法
                        }
                    }.start()
            注：不能直接调用run（）启动另一个线程；不可以还让已经start（）的线程去执行，会报IllegalThreadException异常；
    Thread类中的常用方法：
        start（）：启动当前线程，调用run（）方法；
        run（）：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中；
        currentThread（）：静态方法，返回执行当前代码的线程；
        getName（）：获取当前线程的名字；
        setName（）：设置当前线程的名字【对象.serName（设置名字）】；
        yield（）：释放当前CPU的执行；
        join（）：在线程A中调用线程B的join方法，此时线程A就进入阻塞状态，知道线程B完全执行完后，线程A才结束阻塞状态。
        sleep（long millis）：令当前线程在指定时间内放弃对CPU的控制；
		isAlive（）：判断当前线程是否存火。
