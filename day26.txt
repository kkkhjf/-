1、URL编程
	url统一资源定位符，对应着互联网的某一资源地址；
	格式：
		http://localhost:8080/examples/beauty.jpg?username = Tom
		 协议 主机名 端口号  	资源地址		参数列表
	
2、反射
  反射机制允许程序再执行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法；
	    加载完类后，在堆内存的方法区中就产生了一个class类型的对象，这个独享包含了完整的类的结构信息，我们可以通过这个对象看到类的结构；
	    通过反射可以调用类的私有结构（构造器、方法和属性） 
	关于java.lang.Class类的理解：
		  程序经过javac.exe命令后会生成一个或多个字节码文件（.class）结尾，接着使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存，此过程被称为类的加载。加载到内存中的类就是运行时类，
          此运行时类，就作为Class的一个实例（Class的实例就对相应着一个运行时类）；
		  加载到内存中的运行时类，会缓存一定的时间。再次时间内，我们可以通过不同的方式获取此运行时类； 
	Calss类的实例：
      class的外部类、成员（成员内部类、静态内部类）、局部内部类、匿名内部类）、interface接口、数组（类型和维度一样就是同一个Class）、枚举类、注解、基本数据类型和void；类的加载过程
		  类的加载（将类的class文件读入内存并为之创建一个java.lang.Class对象，此过程由类的加载器实现）-类的连接（将类的二进制数据合并到jre中）-类的初始化（jvm负责对类进行初始化）
           类的加载器：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口；
                     引导类加载器：把Java核心类加载进内存
                     扩展类加载器：把lib下的扩展.jar包加载进内存
                     系统类加载器：把用户自定义的类加载进内存
          类缓存：标准的javeSE类加载器可以按要求查找类，一旦一个类被加载到类加载器中，它将维持加载一段时间；
          
      
  
