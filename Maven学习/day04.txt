1、模块的设计
	pojo模块
		只需要实体类不需要配置文件；
	dao模块
		创建dao模块时需要把用到的插件都在pom.xml中写出来；
		如果用到别的Maven工程，则需要先将别的Maven工程执行install命令，将别的Maven工程当如仓库中；
	service模块
		处理同dao模块类似；
	conmtrol模块
		处理同dao模块类似；
		配置configuration时需要配置一下tomcat的启动命令；
2、聚合
	用一个Maven工程（只含有pom文件）来管理拆分的几个模块；
	具体操作
		在pom.xml中添加<packageing>pom</packageing>；
		在<modules><module>Maven工程</module></modules>标签里添加具体的工程名（本地存储路径）；
3、继承
	由一个父工程来统一管理子工程的所有依赖，父工程来管理依赖的版本号
		先在父工程的pom.xml中声明进行依赖管理
			<dependencyManagement>
				<dependencies>
					子工程的依赖
				</dependencies>
			</dependencyManagement>
		然后在子工程中标注父工程坐标
			<parent>
				<groupId><groupId>
				<artifactId></artifactId>
				<version></version>
				<relativePath>父工程的相对路径</relativePath>
			</parent>
	使用<pluginManagement></pluginManagement>实现对插件的统一管理；
	继承和聚合
		作用
			聚合用于快速构建项目；
			继承用于快速配置；
		相同点
			聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中；
			聚合与继承均属于设计型模块，并无实际的模块内容；
		不同点
			聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些；
			继承时在子模块中配置关系，父模块无法感知哪些子模块继承了自己；
4、属性
	属性用于父工程的pom.xml文件，一般用来管理版本号；
	使用方法
		定义属性
			<properties>
				<属性名>属性值</属性名>
			</properties>
		使用属性
			在父工程的依赖中将对应的版本号使用${属性名}来替换；
	注：${version}是Maven内置的一个属性，代表当前工程的版本号；
5、资源管理
	父工程也可以实现对子项目资源文件的管理；
	使用方法
		首先和定义属性一样，先定义一个属性，该属性代表的是这个资源文件中某一个参数的值；
		然后在该资源文件中使用${属性名}来替换被管理的值；
		最后在父工程的pom.xml文件的<build>标签里添加配置信息
			<resources>
				<resource>
					<directory>被更改的配置文件目录(不需要定位到具体的文件，只需其上一级目录)</directory>
					<filtering>true</filtering>
				</resource>
			</resources>
			注：<testResources><testResource></testResource></testResources>标签是用来添加test目录下的资源信息；
6、多环境兼容
	使Maven工程可以兼容多环境下的运行；
	使用方法
		首先在父工程的pom.xml文件中配置
			<profiles>
				<profile>
					<id>环境的唯一名称</id>
					<properties>
						<属性名>不同环境对应的ip和端口信息</属性名>
					</properties>
				</profile>
			</profiles>
		配置好后在add configurations中给install命令加上参数，install -P 环境名称；
		注：在<profile>标签里添加<actovation><activeByDefault>true</activeByDefault></actovation>即可设置为默认环境；
7、私服
	私服与中央仓库进行切割，每个人只需与私服连接即可，不用于中央仓库直连；
	idea环境中资源上传与下载
		需要的信息
			访问私服的用户名/密码；
			上传的位置(宿主地址)；
			下载的地址(组地址)；
		配置到本地仓库的信息(setting.xml里配置)
			访问私服的用户名和密码
				<servers>
					<server>
						<id>服务器名称(自定义)</id>
						<username>服务器登录名</username>
						<password>服务器密码</password>
					</server>
				</servers>
				<!--配置<mirror>-->
				<mirror>
					<id>服务器名称</id>
					<mirror>*</mirror>
					<url>服务器的访问ip</url>
				</mirror>
			下载的地址；
		注：本地仓库的setting.xml要和安装的Maven的setting.xml要保持一致；
