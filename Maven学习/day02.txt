1、约定的目录结构
	根目录：工程名
	src目录：源码
	pom.xml文件：Maven工程的核心配置文件；
	main目录：存放主程序；
	test目录：存放测试程序；
	Java目录：存放Java源文件；
	resource目录：存放框加或其他工具的配置文件；
2、常用的Maven命令
	执行与构建过程相关的Maven命令，必须进入pom.xml所在的目录；
	常用命令
		mvn clean：清理；
		mvn compile：编译主程序；
		mvn test-compile：编译测试程序；
		mvn test：执行测试；
		mvn package：打包；
	关于联网问题
		Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成，而插件本身并不包含在Maven的核心程序中；
		当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找；
		本地仓库的位置：用户目录\.m2\repository；
		Maven核心程序在本地仓库中找不到需要的插件，会自动链接外网到中央仓库下载，如果无法联网则构建失败；
		注：修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件
				找到Maven解压目录\conf\setting.xml；
				在setting.xml文件中找到localRepository标签，修改其中的路径；
3、POM
	含义：Project Object Model（项目对象模型）
	pom.xml对于Maven工程时核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置；
4、坐标
	使用下面三个向量在仓库中唯一定位一个Maven工程
		groupid：公司或组织域名+项目id；
		artifactid：模块名；
		version：版本；
	Maven工程的坐标与仓库中路径的对应关系
		<groupid>aaa.bb</groupid>
		<artifactid>ccc</artifactid>
		<version>ddd</version>
		转换成仓库中的路径
			aaa/bb/ccc/ddd/ccc-ddd.jar
5、仓库
	本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务；
	远程仓库
		私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务；
		中央仓库：架设在Internet上，为全世界所有Maven工程服务；
		中央仓库镜像：为了分担中央仓库的流量；
	仓库中保存的内容就是Maven工程
		Maven自身所需要的插件；
		第三方框架或工具的jar包；
		我们自己开发的Maven工程；
6、依赖
	Maven解析依赖信息时，会到本地仓库中查找被依赖的jar包（对于我们自己开发的Maven工程，使用mvn install命令安装后就可以进入仓库）；
	依赖的范围（存在于<scope>标签）
		compile
			对主程序是否有效：有效
			对测试程序是否有效：有效
			是否参与打包：参与
		test
			对主程序是否有效：无效
			对测试程序是否有效：有效
			是否参与打包：无效
		provided
			对主程序是否有效：有效
			对测试程序是否有效：有效
			是否参与部署：不参与
7、生命周期
	含义：各个构建环节执行的顺序；
	Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的；
	Maven有三套相互独立的生命周期
		Clen Lifecycle（在进行真正的构建前进行一些清理工作）
			pre-clean：执行一些需要在clean之前完成的工作；
			clean：移除所有上一次构建生成的文件；
			post-clean：执行一些需要在clean之后立即完成的工作；
		Default Lifecycle（构建的核心部分，编译、测试、打包、安装、部署等）
		Site Lifecycle（生成报告、站点、发布站点）
			pre-site：执行一些需要在生成站点文档之前完成的工作；
			site：生成项目的站点文件；
			post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备；
			site-deploy：将生成的站点文档部署到特定的服务器上；
	Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中的各个阶段，不论现在要执行生命周期的哪个阶段，都是从这个生命周期最初的位置开始执行；
	注：生命周期的各个阶段仅仅时定义了要执行的任务是什么；
	    各个阶段和插件的目标是对应的；
	    相似的目标由特定的插件来完成；
	    可以把目标看作是调用插件功能的命令；
