1、对象流🚩（类似于转换流的使用顺序）
    用于存储和读取基本数据类型数据或对象的处理流，可以把Java中的对象写入数据源中，也能把对象从数据源还原；
    序列化：用ObjectOutputStream类保存基本数据类型或对象的机制；（把对象写出）
    反序列化：用ObjectInputStream类读取基本数据类型数据或对象的机制；（把对象读入）
    ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量；
    对象序列化机制
        允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久的保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点，（序列化过程）
           当程序获得这种二进制流，就可以把它恢复成Java对象。（反序列化过程）
    对象流的使用
        序列化过程：将内存中的Java对象保存到磁盘中或通过网络传输出去；
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("xxx.data"));
            oos.writeObject(Boject obj);
        反序列化过程：将磁盘文件中的对象还原为内存中的一个Java对象；
            ObjectInputStream ois = new ObjectOutputStream(new FileInputStream("xxx.data"));
            Object obj = ois.readObject();
    Java对象满足序列化的要求
        对象所在的类必须实现Serializable接口；
        需要给当前类提供一个全局常量serialVersionUID。
    
