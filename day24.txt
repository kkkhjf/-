1、IO流-File类的使用
    File类的一个对象，代表一个文件或一个文件目录；
    File类声明在java.io包下；
    File类中涉及关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，并未涉及写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成；
    后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的“终点”；
    创建File类的实例
        File(String filePath)
        File(String parentPath,String childPath)
        File(File parentFile,String childPath)
    相对于绝对路径（在Windows和Dos系统默认使用"\"；UNIX和URL使用"/"来表示）
        相对路劲：相对于某个路径，指明的路径；
        绝对路径：包含盘符在内的文件或文件目录的路径；
        注：为了解决这个隐患，File类提供了一个常量（public static final String separator），根据操作系统，动态地提供分隔符；
            File file1 = new File("D:\\workspace\\javaSenior")
            File file2 = new File("D:"+File.separator+"workspace"+File.separator+"javaSenior");
    
2、File类的常用方法
    普通File方法
        public String getAbsolutePath()：获取绝对路径
        public String getPath()：获取路径
        public String getName()：获取名称
        public String getParent()：获取上一层文件目录路径，若无，返回NULL
        public long Length()：获取文件长度（即字节数），不能获取目录长度；
        public long lastModified()：获取最后一次地修改时间，毫秒值；
        public boolean renameTo(File dest)：把文件重命名为指定的文件路径（例：file1.rename(file2)，要想保证返回true，需要file1在硬盘中存在，且file2不能在硬盘中存在）
    如 下的两个方法适用于文件目录
        public String[] list()：获取指定目录下的所有文件或者文件目录的名称数组
        public File[] listFiles()：获取指定目录下的所有文件或者文件目录的File数组
    File类的判断方法
        public boolean isDirectory()：判断是否是文件目录
        public boolean isFile()：判断是否是文件
        public boolean exists()：判断是否存在
        public boolean canRead()：判断是否可读
        public boolean canWrite()：判断是否可写
        public boolean isHiden()：判断是否隐藏
    创建硬盘中对应的文件或目录
        public boolean creatNewFile()：创建文件。若文件存在，则不创建，返回false；
        public boolean mkdir()：创建文件目录，如果文件目录存在，就不创建。如果此文件目录的上层目录不存在，也不创建；
        public boolean mkdirs()：创建文件目录，如果上层文件目录不存在，一并创建；
    删除硬盘中的文件或目录
        public boolean delete()：删除文件或文件夹，如果目录下有子文件则不能删除成功（Java中删除不走回收站）

2、IO流
    流的分类：
        按照数据单位区分：字节流（8bit，非文本数据传输），字符流（16bit，文本数据传输）；
        按照流的流向区分：输入流，输出流
        按照角色不同区分：节点流（直接作用在文件上），处理流（在节点流上包裹的流）。
    流的体系结构（Stream结尾的是字节流）：
        抽象基类                节点流(或文件流)              缓冲流(处理流的一种)
        InputStream             FileInputStream             BufferedInputStream
        OutputStream            FileOutoutStream            BufferedOutputStream
        Reader                  FileReader                  BufferedReader
        Writer                  FileWriter                  BufferedWriter
    读入（FileReader为例）
        实例化File类的对象，指明要操作的文件（File file = new File(".\\hello.txt");）；
        提供具体的流（FileReader fr = new FileReader（file））；
        数据的读入
            read()返回读入的一个字符，如果达到文件末尾返回-1；
            read(char[] cbuf)填充数组后返回，到达文件末尾返回-1；
            read(char[] cbuf,int off,int len)指定他填满数组中的长度；
        关闭IO流（fr.close()）；
        注：读入的文件一定要存在，否则会报异常。
    写出（FileWriter）
        例化File类的对象，指明要操作的文件（File file = new File(".\\hello.txt");）；
        提供具体的流（FileWriter fw = new FileWriter（file））；
        数据的写出
            write(String str)将str写入到文件中 ；
        关闭IO流（fw.close()）；
        注：写出的文件如果不存在，系统会自动生成；
            如果存在:
                流使用的是FileWriter(file,false)/FileWriter(file)：对原有文件进行覆盖
                流使用的是FileWriter(file,true)：不会对原有文件进行覆盖。
    字节流的使用
        造文件
            File file = new File("hello.txt");
        造流
            FileInputStream fis = new FileInputStream(file);
        读数据(byte[] buffer = new byte[5]//创建一个字节数组，其余类似)；
        注：对于文本文件(.txt,.java,.c,.cpp)使用字符流处理；
            对于非文本文件(.jap,.mp3,.mp4)使用字节流处理。
    缓冲流的使用
        优点：提高读写速度（内部提供了一个缓冲区）
        缓冲流创建过程：
            造文件
                File file = new File("C:\Users\hjf\Pictures\Saved Pictures\ASLD.jpg");
            造节点流
                FileInputStream fis = new FileInputStream(file);
                FileOutputStream fos = new FileOutputStream(file);
            造缓冲流
                BufferedInputStream bis = new BufferedInputStream(fis);
                BufferedOnputStream bos = new BufferedOutputStream(fos);
            读取、写入
                byte[] buffer = new byte[10];
                int len;
                while((len = bis.read(buffer)) != -1){
                    bos.write(buffer,0,len);
                }
            关闭资源（先关闭外层的流）
    转换流的使用🚩
        将字符流和字节流相互转换
        转换流:属于字符流
            InputStreamReader(FileInputStream fis,String str)：将一个字节的输入流转换成字符的输入流，第一个参数是字节流对象，第二个参数是字符编码；
            OutputStreamWriter：将一个字符的输出流转换成字节的输出流；
            解码：字节、字节数组--->字符、字符数组；
            编码：字符数组、字符--->字节、字节数组；
        字符集
            ASCII：美码
            ISO8859-1：欧洲码
            GB2312：中文码
            GBK：中文码
            Unicode：国际标准码
            UTF-8：通用编码
    标准输入、输出流
        System.in：标准的输入流，默认从键盘输入；
        System.out：标准输出流，默认从控制台输出；
        System类的setIn（InputStream is）/setOut（PrintStream ps）方式重新指定输入和输出的流。
    数据流
        DataInputStream和DataOutputStream（用于读取或写出基本数据类型的变量或字符串）
        DataoutputStream写出的数据必须要用DataInputStream读入，读取数据的顺序要和写入的顺序一致；
        @Test
    public void DataOutStreamTest() throws IOException {
        DataOutputStream dos = new DataOutputStream(new FileOutputStream("abc.txt"));
        dos.writeUTF("hejianfeng");
        dos.writeChar('Y');
        dos.writeBoolean(false);

        dos.close();
    }
    @Test
    public void DataInStreamTest() throws IOException {
        DataInputStream dis = new DataInputStream(new FileInputStream("abc.txt"));
        String str = dis.readUTF();
        char v = dis.readChar();
        boolean flag = dis.readBoolean();

        System.out.println("String: " + str + " Char: " + v + " Boolean: " + flag);
        dis.close();
    }
